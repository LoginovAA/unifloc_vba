'=======================================================================================
'Unifloc7.3  Testudines                                           khabibullinra@gmail.com
'Библиотека расчетных модулей по нефтяному инжинирингу
'2000 - 2018 г
'
'=======================================================================================
'  Расчеты многофазного поток
Option Explicit
'=======================================================================================
'Unifloc7.3  Testudines                                           khabibullinra@gmail.com
'Библиотека расчетных модулей по нефтяному инжинирингу
'2000 - 2018 г
'
'=======================================================================================
' расчет корреляции Ансари
'Private p_Fluid As CPVT
'Private Sub Class_Initialize()
'Set p_Fluid = New CPVT
'End Sub
'Public Property Get Fluid() As CPVT
'Set Fluid = p_Fluid
'End Property
'Public Property Set Fluid(val As CPVT)
'Set p_Fluid = val
   'p_Calculated = False
'End Property
  
Const c_p = 0.000009871668    ' переводной коэффициент
 
Public Function unf_AnsariGradient(ByVal arr_d_m As Double, _
                                  ByVal arr_theta_deg As Double, ByVal eps_m As Double, _
                                  ByVal Ql_rc_m3day As Double, ByVal Qg_rc_m3day As Double, _
                                  ByVal Mul_rc_cP As Double, ByVal Mug_rc_cP As Double, _
                                  ByVal sigma_l_Nm As Double, _
                                  ByVal rho_lrc_kgm3 As Double, _
                                  ByVal rho_grc_kgm3 As Double, _
                                  ByVal p_atma As Double, _
                                  Optional ByVal ZNLF As Boolean = False, _
                                  Optional betta_grav As Double = 1, _
                                  Optional betta_fric As Double = 1)
  
 Dim dPdLg_out_atmm As Double
 Dim dPdLf_out_atmm As Double
 Dim Hl_out_fr As Double
 Dim fpat_out_num
 Dim dPdLa_out_atmm As Double
 Dim dPdL_out_atmm As Double
 Dim pgf_out_atmm As Double
 Dim pge_out_atmm As Double
 Dim pga_out_atmm As Double
 Dim pgt_out_atmm As Double
 ' znlf - calculates zero net liquid flow - gas flow through liquid column
 '=================
 
 Dim roughness_d As Double
 Dim Ap_m2 As Double ' площадь трубы
 Dim lambda_l   As Double
 Dim Vsl_msec, Vsg_msec
 Dim flow_pattern As Integer
 Dim ierr
 Dim ang1 As Double
 Dim timeStamp
 
 timeStamp = Time()
 roughness_d = eps_m '/ arr_d_m
 Ap_m2 = const_Pi * arr_d_m ^ 2 / 4
 lambda_l = Ql_rc_m3day / (Ql_rc_m3day + Qg_rc_m3day)
 Vsl_msec = const_conver_sec_day * Ql_rc_m3day / Ap_m2
 Vsg_msec = const_conver_sec_day * Qg_rc_m3day / Ap_m2
 ang1 = arr_theta_deg
 If arr_theta_deg < 75 Then
    ang1 = 75
    addLogMsg "AnsariGradient: угол arr_theta_deg = " & arr_theta_deg & " меньше допустимого 75 град. При расчете градиента использован угол 75 гр"
 End If
 If arr_theta_deg > 90 Then
    ang1 = 90
    addLogMsg "AnsariGradient: угол arr_theta_deg = " & arr_theta_deg & " больше 90 град. При расчете градиента использован угол 90 гр"
 End If
 Call ansari(ang1, arr_d_m, roughness_d, p_atma, Vsl_msec, Vsg_msec, lambda_l, rho_grc_kgm3, rho_lrc_kgm3, Mug_rc_cP, Mul_rc_cP, _
                    sigma_l_Nm, _
                    Hl_out_fr, pgf_out_atmm, pge_out_atmm, pga_out_atmm, pgt_out_atmm, fpat_out_num, , ierr)
  
 dPdL_out_atmm = (pge_out_atmm * Sin(arr_theta_deg * const_Pi / 180) / Sin(ang1 * const_Pi / 180) + pgf_out_atmm + pga_out_atmm)
 dPdLg_out_atmm = pge_out_atmm * Sin(arr_theta_deg * const_Pi / 180) / Sin(ang1 * const_Pi / 180)
 dPdLf_out_atmm = pgf_out_atmm
 dPdLa_out_atmm = pga_out_atmm
  
           Select Case fpat_out_num
              Case " liq": fpat_out_num = 100 ' " liq" = liquid
              Case " gas": fpat_out_num = 101 ' " gas" = gas
              Case "anul": fpat_out_num = 105 ' "anul" = annular
              Case "dbub": fpat_out_num = 104 ' "dbub" = dispersed bubble
              Case "slug": fpat_out_num = 103 ' "slug" = slug
              Case "bubl": fpat_out_num = 102 ' "bubl" = bubbly
              Case "  na": fpat_out_num = 199
          End Select '(fpat)
  
  
unf_AnsariGradient = Array(dPdLg_out_atmm * betta_grav + dPdLf_out_atmm * betta_fric, _
                            dPdLg_out_atmm * betta_grav, _
                            dPdLf_out_atmm * betta_fric, _
                            dPdLa_out_atmm, _
                            Vsl_msec, _
                            Vsg_msec, _
                            Hl_out_fr, _
                            fpat_out_num)
  
  
 timeAnsariTotal = timeAnsariTotal + timeStamp - Time()
End Function
'     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
'     comprehensive mechanistic model for pressure gradient, liquid
'     holdup and flow pattern predictions
'     written by,    asfandiar m. ansari
'     revised by,    asfandiar m. ansari
'     revised by,    tuffp                  last revision: november 89
'              * *  tulsa university fluid flow projects  * *
'     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
'     this subroutine calculates two phase liquid holdup, flow pattern
'     and pressure gradient using the mechanistic approach developed from
'     the separate models for flow pattern prediction and flow behavior
'     prediction of the individual flow patterns. the english system of
'     units is used for the input data but converted to si units for the
'     subsequent calculations.
'                               reference
'                               ---------
'     1.  ansari, a. m., " mechanistic model for two-phase upward flow."
'         m.s thesis, the university of tulsa (1988).
'     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
'                   input/output logical file variables
'                   -----------------------------------
'     ioerr = output file for error messages when input values passed
'             to the subroutine are out of range or error occurs in
'             the calculation.
'                          subsubroutines called
'                          ------------------
'     upfpdet = this subroutine predicts flow pattern only for upward
'               flow using taitel, barnea, & dukler model.
'     single = this subroutine calculates pressure gradient for single
'              phase flow of liquid or gas.
'     bubble = this subroutine calculates pressure gradient both for
'              dispersed bubble and bubbly flows.
'     slug   = this subroutine calculates pressure gradient for slug
'              flow.
'     anmist = this subroutine calculates pressure gradient for
'              annular-mist flow.
'                       variable description
'                       --------------------
'     *ang   = angle of flow from horizontal. (deg.)
'      angr  = angle of flow from horizontal. (rad)
'     *deng  = gas density. (lbm/ft^3)
'     *denl  = liquid density. (lbm/ft^3)
'     *di    = inside pipe diameter. (m)
'      e     = liquid holdup fraction.
'     *ed    = relative pipe roughness.
'     *ens   = no-slip liquid holdup fraction.
'      fpat  = flow pattern, (chr)
'                 " liq" = liquid
'                 " gas" = gas
'                 "bubl" = bubbly
'                 "slug" = slug
'                 "dbub" = dispersed bubble
'                 "anul" = annular
'      ierr  = error code. (0=ok, 1=input variables out of range,
'              2=extrapolation of correlation occurring)
'     *ioerr = output file for error messages when input values
'              passed to the subroutine are out of range.
'     *p     = pressure. (psia)
'      pga   = acceleration pressure gradient. (psi/ft)
'      pge   = elevation pressure gradient. (psi/ft)
'      pgf   = friction pressure gradient. (psi/ft)
'      pgt   = total pressure gradient. (psi/ft)
'     *surl  = gas-liquid surface tension. (dynes/cm)
'     *visg  = gas viscosity. (cp)
'     *visl  = liquid viscosity. (cp)
'     *vm    = mixture velocity. (ft/sec)
'      vsg   = superficial gas velocity. (ft/sec)
'      vsl   = superficial liquid velocity. (ft/sec)
'      (*indicates input variables)
'     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
Private Sub ansari(ang, di_m, ed, p_atma, vsl_m3sec, vsg_m3sec, ens, deng_kgm3, denl_kgm3, visg, visl, surl, E, pgf, pge, pga, pgt, fpat, Optional ioerr, Optional ierr, _
            Optional ByVal ZNLF As Boolean = False)
'  addLogMsg "ansari start"
'Dim fpat As String * 4
'     ^^^^^^^^^^^^^^^^^^^
'     check input variables for valid range.
'     ^^^^^^^^^^^^^^^^^^^
ierr = 0
'If (ang < 75# Or ang > 90#) Then
'
'    addLogMsg "ansari: illegal value input for ang"
'    ierr = 1
'ElseIf (di_m <= 0#) Then
'    addLogMsg "ansari: illegal value input for di_m"
'    ierr = 1
'ElseIf (ed < 0# Or ed >= 0.05) Then
'    addLogMsg "ansari: illegal value input for roughness ed =" & ed
'    ed = 0
'    'ierr = 1
'ElseIf (P < 0#) Then
'    addLogMsg "ansari: illegal value input for p"
'    ierr = 1
'ElseIf (vm <= 0#) Then
'    addLogMsg "ansari: illegal value input for vm"
'    ierr = 1
'ElseIf (ens < 0# Or ens > 1#) Then
'    addLogMsg "ansari: illegal value input for ens"
'    ierr = 1
'ElseIf (deng < 0#) Then
'    addLogMsg "ansari: illegal value input for deng"
'    ierr = 1
'ElseIf (denl < 0#) Then
'    addLogMsg "ansari: illegal value input for denl"
'    ierr = 1
'ElseIf (visg < 0#) Then
'    addLogMsg "ansari: illegal value input for visg"
'    ierr = 1
'ElseIf (visl < 0#) Then
'    addLogMsg "ansari: illegal value input for visl"
'    ierr = 1
'ElseIf (surl < 0#) Then
'    addLogMsg "ansari: illegal value input for surl"
'    ierr = 1
'End If
'If (ierr = 1) Then GoTo L999
'     ^^^^^^^^^^^
'     end of validity check.
'     ^^^^^^^^^^^
'     --------------------------------
'     initialize the output variables.
'     --------------------------------
E = 0#
pgf = 0#
pge = 0#
pga = 0#
pgt = 0#
fpat = "    "
'     --------------------------------------
'     convert input variables into si units.
'     --------------------------------------
Dim angr As Double, P_Pa
angr = ang * 3.1416 / 180#
'di = di * 0.3048
P_Pa = p_atma * 101325# '/ 14.7
'vm = vm * 0.3048
'deng = deng * 16.0184
'denl = denl * 16.0184
visg = visg * 0.001
visl = visl * 0.001
'surl = surl * 0.001
'     --------------------------------------------------------
'     calculate superficial velocities and absolute roughness.
'     --------------------------------------------------------
'vsl = vm * ens
'vsg = vm - vsl
'     ------------------------------------------
'     check for single phase gas or liquid flow.
'     ------------------------------------------
If (ens > 0.99999) Then
    '        ---------------------------
    '        single phase liquid flow.
    '        ---------------------------
    fpat = " liq"
    Call single1(angr, di_m, ed, vsl_m3sec, denl_kgm3, visl, P_Pa, pgf, pge, pga, pgt, ioerr, ierr)
    E = 1#
    If (ierr = 1) Then
        addLogMsg "ansari: error close #ioerr:exit sub from single", " call for liquid flow."
        GoTo L999
    End If
ElseIf (ens < 0.00001) And Not ZNLF Then
    '        ----------------------
    '        single phase gas flow.
    '        ----------------------
    '  rnt
    '  znlf = true  => ens = 0, no liquid movement
    '
    
    fpat = " gas"
    Call single1(angr, di_m, ed, vsg_m3sec, deng_kgm3, visg, P_Pa, pgf, pge, pga, pgt, ioerr, ierr)
    
    E = 0#
    If (ierr = 1) Then
        addLogMsg "ansari: error close #ioerr:exit sub from single", " call for gas flow."
        GoTo L999
    End If
Else
    '        -----------------------------------------------------------
    '        determine flow pattern using taitel, barnea & dukler model.
    '        -----------------------------------------------------------
    Call upfpdet(di_m, ed, denl_kgm3, deng_kgm3, visl, visg, ang, surl, vsl_m3sec, vsg_m3sec, fpat, ioerr, ierr)
    If (fpat = "anul") Then
        '           -------------------------
        '           annular-mist flow exists.
        '           -------------------------
        Call anmist(angr, di_m, ed, denl_kgm3, deng_kgm3, visl, visg, vsl_m3sec, vsg_m3sec, _
                           surl, fpat, E, pgf, pge, pga, pgt, ioerr, ierr)
        If (ierr = 1) Then
            addLogMsg "ansari: error close #ioerr:exit sub from anmist call"
            GoTo L999
        End If
        If (fpat = "slug") Then
            '              -----------------------------------------------
            '              annular flow not confirmed. slug flow persists.
            '              -----------------------------------------------
            Call slug(angr, di_m, ed, denl_kgm3, deng_kgm3, visl, visg, vsl_m3sec, vsg_m3sec, _
                                surl, E, pgf, pge, pga, pgt, ioerr, ierr)
            If (ierr = 1) Then
                addLogMsg "ansari: error close #ioerr:exit sub from slug call"
                GoTo L999
            End If
        End If
        ElseIf (fpat = "slug") Then
        '           -----------------
        '           slug flow exists.
        '           -----------------
L5:
        Call slug(angr, di_m, ed, denl_kgm3, deng_kgm3, visl, visg, vsl_m3sec, vsg_m3sec, _
                         surl, E, pgf, pge, pga, pgt, ioerr, ierr)
        If (ierr = 1) Then
            addLogMsg "ansari: error close #ioerr:exit sub from slug call"
            GoTo L999
        End If
        ElseIf (fpat = "bubl" Or fpat = "dbub") Then
        '           -------------------
        '           bubble flow exists.
        '           -------------------
        Call bubble(angr, di_m, ed, denl_kgm3, deng_kgm3, visl, visg, vsl_m3sec, vsg_m3sec, _
                           surl, fpat, E, pgf, pge, pga, pgt, ioerr, ierr)
        If (ierr = 1) Then
            addLogMsg "ansari: error Close #ioerr:exit sub from bubble call"
            GoTo L999
        End If
        Else
        fpat = "  na"
        ierr = 1
        addLogMsg "ansari: error in flow pattern detection"
        GoTo L999
    End If
End If
'     -----------------------------------------------------------
'     convert pressure gradients and diameter into english units.
'     -----------------------------------------------------------
pge = pge / 101325#
pgf = pgf / 101325#
pga = pga / 101325#
pgt = pgt / 101325#
'di = di / 0.3048
'P = P_atma / 101325# '* 14.7
'vm = vm / 0.3048
'deng = deng / 16.0184
'denl = denl / 16.0184
visg = visg * 1000#
visl = visl * 1000#
'surl = surl * 1000#
L999:
'  addLogMsg "ansari finish"
End Sub
Private Sub anmist(angr, di, ed, denl, deng, visl, visg, vsl, vsg, surl, fpat, E, pgf, pge, pga, pgt, ioerr, ierr)
'Dim fpat As String * 4
Dim nf As Double
Dim nc As Double
'Dim itsafe As Double
'     ^^^^^^^^^^^^^^^^^^^
'     check input variables for valid range.
'     ^^^^^^^^^^^^^^^^^^^
ierr = 0
If (angr <= 0# Or angr > 1.5708) Then
    
    addLogMsg " anmist: illegal value input for angr"
    ierr = 1
    ElseIf (di <= 0#) Then
    addLogMsg " anmist: illegal value input for di"
    ierr = 1
    ElseIf (ed < 0# Or ed >= 0.05) Then
    addLogMsg " anmist: illegal value input for ed"
    ierr = 1
    ElseIf (denl < 0#) Then
    addLogMsg " anmist: illegal value input for denl"
    ierr = 1
    ElseIf (deng < 0#) Then
    addLogMsg " anmist: illegal value input for denl"
    ierr = 1
    ElseIf (visl < 0#) Then
    addLogMsg " anmist: illegal value input for visl"
    ierr = 1
    ElseIf (visg < 0#) Then
    addLogMsg " anmist: illegal value input for visg"
    ierr = 1
    ElseIf (vsl < 0#) Then
    addLogMsg "   slug: illegal value input for vsl"
    ierr = 1
    ElseIf (vsg < 0#) Then
    addLogMsg " anmist: illegal value input for vsg"
    ierr = 1
    ElseIf (surl < 0#) Then
    addLogMsg " anmist: illegal value input for surl"
    ierr = 1
End If
If (ierr = 1) Then GoTo L999
'     --------------------------------------
'     calculate fe using wallis correlation.
'     --------------------------------------
Dim X As Double, fe As Double
X = (deng / denl) ^ 0.5 * 10000# * vsg * visg / surl
fe = 1# - Exp(-0.125 * (X - 1.5))
If (fe <= 0#) Then fe = 0#
If (fe >= 1#) Then fe = 1#
'     -----------------------------------------------------------
'     use appropriate correlation factor for interfacial friction
'     according to the entrainment fraction.
'     -----------------------------------------------------------
Dim c As Double
If (fe > 0.9) Then
    '        ------------------------------
    '        use wallis correlation factor.
    '        ------------------------------
    c = 300#
    Else
    '        -------------------------------
    '        use whalley correlation factor.
    '        -------------------------------
    c = 24# * (denl / deng) ^ (1# / 3#)
End If
'     ---------------------------------------------------
'     calculate superficial pressure gradients for entire
'     liquid and gas-liquid core.
'     ---------------------------------------------------
Dim alfc As Double, vsc, denc, visc, recs, ffcs, rels, ffls, relf, fflf, a
alfc = 1# / (1# + fe * vsl / vsg)
vsc = vsg + fe * vsl
denc = deng * alfc + denl * (1# - alfc)
visc = visg * alfc + visl * (1# - alfc)
recs = denc * vsc * di / visc
ffcs = 16# / recs
If (recs > 2000#) Then
    'ffcs = 0.0625 / (log10(ed / 3.7 - 5.02 / recs * log10(ed / 3.7 + 13# / recs))) ^ 2
    ffcs = 0.0625 / (log10(2 * ed / di / 3.7 - 5.02 / recs * log10(2 * ed / di / 3.7 + 13# / recs))) ^ 2
End If
rels = denl * vsl * di / visl
ffls = 16# / rels
If (rels > 2000#) Then
    'ffls = 0.0625 / (log10(ed / 3.7 - 5.02 / rels * log10(ed / 3.7 + 13# / rels))) ^ 2
    ffls = 0.0625 / (log10(2 * ed / di / 3.7 - 5.02 / rels * log10(2 * ed / di / 3.7 + 13# / rels))) ^ 2
End If
If (fe < 0.9999) Then
    relf = denl * vsl * (1 - fe) * di / visl
    fflf = 16# / relf
    If (relf > 2000#) Then
        'fflf = 0.0625 / (log10(ed / 3.7 - 5.02 / relf * log10(ed / 3.7 + 13# / relf))) ^ 2
        fflf = 0.0625 / (log10(2 * ed / di / 3.7 - 5.02 / relf * log10(2 * ed / di / 3.7 + 13# / relf))) ^ 2
    End If
    a = (1# - fe) ^ 2 * (fflf / ffls)
    Else
    a = 1#
End If
 
Dim pgfcs, pgfls, xm2, xmo2, ym
pgfcs = 4# * ffcs * denc * vsc * vsc / (2# * di)
pgfls = 4# * ffls * denl * vsl * vsl / (2# * di)
'     --------------------------------------------------------
'     calculate modified lockhart and martinelli parameters as
'     defined by alves including entrainment fraction.
'     --------------------------------------------------------
xm2 = pgfls / pgfcs
xmo2 = xm2 * a
ym = 9.81 * Sin(angr) * (denl - denc) / pgfcs
'     ------------------------------------------------------------
'     calculate film thickness if entrainment is less than 99.99%.
'     ------------------------------------------------------------
Dim deldmx, deldmn, deldac, deld, ec, phic2, phif2
If (fe < 0.9999) Then
    deldmx = 0.499
    deldmn = 0.000001
    deldac = 0.000001
    deld = itsafe(xmo2, ym, c, 0#, 0#, 0#, 4, deldmn, deldmx, deldac, ioerr, ierr)
    If (ierr = 1) Then
        addLogMsg " anmist: error Close #ioerr:exit subed from itsafe", " call for deld"
        GoTo L999
    End If
    '        ----------------------------------------------
    '        check whether annular flow could exist or not.
    '        ----------------------------------------------
    ec = 1# - alfc
    Call chkan(xmo2, ym, deld, ec, E, fpat, ioerr, ierr)
    If (ierr = 1) Then
        addLogMsg " anmist: error Close #ioerr:exit subed from chkan call"
        GoTo L999
    End If
    If (fpat = "slug") Then
        '            -----------------------------------------------------
        '            annular flow not confirmed by barnea"s criteria. slug
        '            flow continues to exist.
        '            -----------------------------------------------------
        Exit Sub
    End If
    '        ------------------------------------------------------
    '        calculate dimensionless groups defined by alves.
    '        ------------------------------------------------------
L55:
    phic2 = (1# + c * deld) / (1# - 2# * deld) ^ 5
    phif2 = (phic2 - ym) / xm2
    Else
    '        ------------------------------------------------------
    '        assume 100 % entrainment and therefore no liquid film.
    '        ------------------------------------------------------
    fe = 1#
    deld = 0#
    phic2 = 1#
    phif2 = 0#
    E = 1# - alfc
    If (E > 0.12) Then
        fpat = "slug"
        GoTo L999
    End If
End If
'     -----------------------------------------
'     calculate pressure gradients in the core.
'     -----------------------------------------
Dim pgec, pgfc, pgtc, pgef, pgff, pgtf
pgec = 9.81 * denc * Sin(angr)
pgfc = pgfcs * phic2
pgtc = pgec + pgfc
'     -----------------------------------------
'     calculate pressure gradients in the film.
'     -----------------------------------------
pgef = 9.81 * denl * Sin(angr)
pgff = pgfls * phif2
pgtf = pgef + pgff
'     --------------------------------------------------------------
'     assume core pressure gradients to be the gradients for annular
'     flow pattern. the total pressure gradient can be that of film
'     or core.
'     --------------------------------------------------------------
pge = pgec
'pgf = pgfc
pgf = pgfcs
pgt = pgtc
pga = 0#
L999:
End Sub
'================================================ Ansari =======================================================================
'     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
'     mechanistic model for pressure gradient in single phase (liquid
'     or gas) flow.
'     written by,    asfandiar m. ansari
'     revised by,    asfandiar m. ansari     last revision: march 1989
'              * *  tulsa university fluid flow projects  * *
'     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
'     this subroutine calculates single phase pressure gradient using
'     simple mechanistic approach. an explicit equation developed by
'     zigrang and sylvester is used for friction factor.the si system
'     of units is used.
'                   input/output logical file variables
'                   -----------------------------------
'     ioerr = output file for error messages when input values passed
'             to the subroutine are out of range or error occurs in
'             the calculation.
'                       variable description
'                       --------------------
'     *angr  = angle of flow from horizontal. (rad)
'     *den   = density of liquid or gas. (kg/cum)
'     *di    = inside pipe diameter. (m)
'     *ed    = relative pipe roughness.
'      ekk   = kinetic energy term used to determine if critical flow
'              exists.
'      ff    = friction factor.
'      icrit = critical flow indicator (0-noncritical, 1-critical)
'      ierr  = error code. (0=ok, 1=input variables out of range,
'              2=extrapolation of correlation occurring)
'     *ioerr = output file for error messages when input values
'              passed to the subroutine are out of range.
'     *p     = pressure. (pa)
'      pga   = acceleration pressure gradient. (pa/m)
'      pge   = elevation pressure gradient. (pa/m)
'      pgf   = friction pressure gradient. (pa/m)
'      pgt   = total pressure gradient. (pa/m)
'      re    = reynolds number for liquid or gas.
'     *vis   = viscosity. of liquid or gas (kg/m-s)
'     *v     = velocity. of liquid or gas (m/s)
'      (*indicates input variables)
'     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
Private Sub single1(angr, di, ed, v, den, vis, p, pgf, pge, pga, pgt, ioerr, ierr)
'     ^^^^^^^^^^^^^^^^^^^
'     check input variables for valid range.
'     ^^^^^^^^^^^^^^^^^^^
ierr = 0
If (angr < 0# Or angr > 1.5708) Then
  
    addLogMsg "single: illegal value input for angr"
    ierr = 1
    ElseIf (di <= 0#) Then
    addLogMsg "single: illegal value input for di"
    ierr = 1
    ElseIf (ed < 0# Or ed >= 0.05) Then
    addLogMsg "single: illegal value input for ed"
    ierr = 1
    ElseIf (v <= 0#) Then
    addLogMsg "single: illegal value input for v"
    ierr = 1
    ElseIf (den < 0#) Then
    addLogMsg "single: illegal value input for den"
    ierr = 1
    ElseIf (vis < 0#) Then
    addLogMsg "single: illegal value input for vis"
    ierr = 1
    ElseIf (p < 0#) Then
    addLogMsg "single: illegal value input for p"
    ierr = 1
End If
If (ierr = 1) Then GoTo L999
'     ^^^^^^^^^^^
'     end of validity check.
'     ^^^^^^^^^^^
'     --------------------------------------
'     calculate elevation pressure gradient.
'     --------------------------------------
pge = den * Sin(angr) * 9.81
'     ---------------------------------------
'     calculate frictional pressure gradient.
'     ---------------------------------------
Dim Re, Ff
Re = di * den * v / vis
Debug.Print "unf_single1.di =" & di
Ff = 64# / Re
If (Re > 2000#) Then
   Ff = 0.25 / (log10(ed / 3.7 - 5.02 / Re * log10(ed / 3.7 + 13# / Re))) ^ 2
End If
pgf = 0.5 * den * Ff * v * v / di
'     -------------------------------------------
'     calculate accelerational pressure gradient.
'     -------------------------------------------
Dim ekk, icrit
ekk = den * v * v / p
icrit = 0
If (ekk > 0.95) Then icrit = 1
If (icrit = 1) Then ekk = 0.95
pgt = (pge + pgf) / (1# - ekk)
pga = pgt * ekk
pgt = (pge + pgf)
L999:
End Sub
'     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^*
'     mechanistic model for pressure gradient and liquid holdup in
'     bubble flow.
'     written by,    asfandiar m. ansari
'     revised by,    asfandiar m. ansari     last revision: march 1989
'              * *  tulsa university fluid flow projects  * *
'     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^*
'     this subroutine calculates liquid holdup and pressure gradient
'     both for dispersed bubble and bubbly flows using a mechanistic
'     approach. for dispersed bubble flow the subroutine assumes no
'     slippage, whereas for bubbly flow slippage is considered between
'     the two phases. an explicit equation developed by zigrang and
'     sylvester is used for friction factor. the si system of units is
'     used.
'                               references
'                               ----------
'     1.  ansari, a. m. and sylvester, n. d., " a mechanistic model for
'         upward bubble flow in pipes ", aiche j., 8, 34, 1392-1394,
'         (aug 1988).
'     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^*
'                   input/output logical file variables
'                   -----------------------------------
'     ioerr = output file for error messages when input values passed
'             to the subroutine are out of range or error occurs in
'             the calculation.
'                          subsubroutines called
'                          ------------------
'     itsafe = this function iterates safely between the two extreme
'              limits of a variable. it is use to calculate e.
'                       variable description
'                       --------------------
'     *angr  = angle of flow from horizontal. (rad)
'      den   = slip / no-slip density (kg/cum)
'     *deng  = gas density. (kg/cum)
'     *denl  = liquid density. (kg/cum)
'      df    = derivative of the function used in newton-raphson method.
'     *di    = inside pipe diameter. (m)
'      e     = liquid holdup fraction.
'      eacc  = accuracy required in iteration for e.
'     *ed    = relative pipe roughness.
'      emax  = upper limit for e during iteration.
'      emin  = lower limit for e during iteration.
'      ens   = no-slip liquid holdup fraction.
'      emin  = lower limit for e during iteration.
'      f     = function defined for newton-raphson method.
'      ff    = friction factor
'      fpat  = flow pattern, (chr)
'                 "dbub" = dispersed bubble
'                 "bubl" = bubbly
'      ierr  = error code. (0=ok, 1=input variables out of range,
'              2=extrapolation of correlation occurring)
'     *ioerr = output file for error messages when input values
'              passed to the subroutine are out of range.
'      pga   = acceleration pressure gradient. (pa/m)
'      pge   = elevation pressure gradient. (pa/m)
'      pgf   = friction pressure gradient. (pa/m)
'      pgt   = total pressure gradient. (pa/m)
'      re    = reynolds number.
'     *visg  = gas viscosity. (kg/m-s)
'     *visl  = liquid viscosity. (kg/m-s)
'      visns = no-slip viscosity. (kg/m-s)
'      vs    = slip velocity (m/s)
'     *vsg   = superficial gas velocity. (m/s)
'     *vsl   = superficial liquid velocity. (m/s)
'      (*indicates input variables)
'     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
Private Sub bubble(angr, di, ed, denl, deng, visl, visg, vsl, vsg, surl, fpat, E, pgf, pge, pga, pgt, ioerr, ierr)
'Dim fpat As String * 4
'Dim fpatck As String * 4
'Dim itsafe As Double
'     ^^^^^^^^^^^^^^^^^^^
'     check input variables for valid range.
'     ^^^^^^^^^^^^^^^^^^^
ierr = 0
Dim fpatck
If (fpat = "bubl") Then fpatck = "bubl"
If (fpat = "dbub") Then fpatck = "bubl"
If (angr <= 0# Or angr > 1.5708) Then
    
    addLogMsg " bubble: illegal value input for angr"
    ierr = 1
    ElseIf (di <= 0#) Then
    addLogMsg " bubble: illegal value input for di"
    ierr = 1
    ElseIf (ed < 0# Or ed >= 0.05) Then
    addLogMsg " bubble: illegal value input for ed"
    ierr = 1
    ElseIf (denl < 0#) Then
    addLogMsg " bubble: illegal value input for denl"
    ierr = 1
    ElseIf (deng < 0#) Then
    addLogMsg " bubble: illegal value input for denl"
    ierr = 1
    ElseIf (visl < 0#) Then
    addLogMsg " bubble: illegal value input for visl"
    ierr = 1
    ElseIf (visg < 0#) Then
    addLogMsg " bubble: illegal value input for visg"
    ierr = 1
    ElseIf (vsl < 0#) Then
    addLogMsg " bubble: illegal value input for vsl"
    ierr = 1
    ElseIf (vsg < 0#) Then
    addLogMsg " bubble: illegal value input for vsg"
    ierr = 1
    ElseIf (fpatck <> "bubl") Then
    addLogMsg " bubble: illegal value input for fpat"
    ierr = 1
End If
If (ierr = 1) Then GoTo L999
'     ^^^^^^^^^^^
'     end of validity check.
'     ^^^^^^^^^^^
'     --------------------------------------
'     calculate slip and no-slip parameters.
'     --------------------------------------
Dim ens, visns, vs
ens = vsl / (vsl + vsg)
visns = visl * ens + visg * (1# - ens)
vs = 1.53 * (surl * 9.81 * (denl - deng) / denl ^ 2) ^ 0.25
If (fpat = "dbub") Then
    '        ------------------------------------------------------
    '        dispersed  bubble flow exists, calculate no-slip holdup.
    '        ------------------------------------------------------
    E = ens
    Else
    '        --------------------------------------------------
    '        bubbly flow exists, calculate actual liquid holdup
    '        using function itsafe for iteration.
    '        --------------------------------------------------
    Dim emin, emax, eacc
    emin = ens
    emax = 0.999
    eacc = 0.001
    E = itsafe(vsl, vsg, vs, 0#, 0#, 0#, 1, emin, emax, eacc, ioerr, ierr)
    If (ierr = 1) Then
        addLogMsg " bubble: error Close #ioerr:exit subed from itsafe", " call for e"
        GoTo L999
    End If
End If
'     --------------------------------------
'     calculate elevation pressure gradient.
'     --------------------------------------
Dim den
den = denl * E + deng * (1# - E)
pge = den * Sin(angr) * 9.81
'     ---------------------------------------
'     calculate frictional pressure gradient.
'     ---------------------------------------
Dim Re, Ff
Re = den * (vsl + vsg) * di / visns
Ff = 64# / Re
If (Re > 2000#) Then
 'Ff = 0.25 / (log10(ed / 3.7 - 5.02 / Re * log10(ed / 3.7 + 13# / Re))) ^ 2
  Ff = 0.25 / (log10(2 * ed / di / 3.7 - 5.02 / Re * log10(2 * ed / di / 3.7 + 13# / Re))) ^ 2
End If
pgf = 0.5 * den * Ff * (vsl + vsg) ^ 2 / di
'     ---------------------------------------------------------
'     calculate total pressure gradient neglecting acceleration
'     component.
'     ---------------------------------------------------------
pga = 0#
pgt = pge + pgf + pga
L999:
End Sub
'     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^*
'     mechanistic model for pressure gradient and liquid holdup in
'     slug flow.
'     written by,    asfandiar m. ansari
'     revised by,    asfandiar m. ansari       last revision: nov 1988
'              * *  tulsa university fluid flow projects  * *
'     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^*
'     this subroutine calculates liquid holdup and pressure gradient
'     for slug flow based on the flow mechanics. the concept of develop-
'     ing slug flow adopted by e.f. caetano is incorporated in the model.
'     the si system of units is used.
'                               references
'                               ----------
'     1.  sylvester, n. d., " a mechanistic model for two-phase
'         vertical slug flow in pipes ", asme j.energy resources tech.,
'         vol. 109,(1987),206-213.
'     2.  caetano, e. f., " upward vertical two-phase flow through an
'         annulus ",phd dissertation, the university of tulsa (1985)
'     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
'                   input/output logical file variables
'                   -----------------------------------
'     ioerr = output file for error messages when input values passed
'             to the subroutine are out of range or error occurs in
'             the calculation.
'                          subsubroutines called
'                          ------------------
'     itsafe = this function iterates safely between the two extreme
'              limits of a variable. it is used to calculate alftb and
'              deln
'                       variable description
'                       --------------------
'     alfacc = accuracy required in iteration for alftb.
'     alfls  = void fraction in liquid slug.
'     alfns  = no-slip void fraction in liquid slug.
'     alfmax = upper limit for alftb during iteration.
'     alfmin = lower limit for alftb during iteration.
'     alftb  = av. void fraction in taylor bubble for a developed flow or
'              the local void fraction at the bubble tail for a develop-
'              ing slug flow.
'     alftba = av.void fraction in taylor bubble for a developing flow.
'     alftbn = void fraction in taylor bubble at nusselt thickness.
'     alfsu  = void fraction in slug unit for developed slug flow.
'    *angr   = angle of flow from horizontal. (rad)
'     beta   = ratio of ltb and lsu.
'     delacc = accuracy required in iteration for deln. (m)
'     delmax = upper limit for deln during iteration. (m)
'     delmin = lower limit for deln during iteration. (m)
'     deln   = nusselt film thickness. (m)
'    *deng   = gas density. (kg/cum)
'    *denl   = liquid density. (kg/cum)
'     denns  = no-slip density. (kg/cum)
'     dens   = slip density. kg.cum)
'    *di     = inside pipe diameter. (m)
'     e      = liquid holdup fraction.
'     esu    = liquid holdup fraction for a slug unit.
'    *ed     = relative pipe roughness.
'     ff     = friction factor
'     ffls   = friction factor for liquid slug.
'     ierr   = error code. (0=ok, 1=input variables out of range,
'              2=extrapolation of correlation occurring)
'     ind    = indicator for the flow,
'                0 = developed flow.
'                + = developing flow.
'    *ioerr  = output file for error messages when input values
'              passed to the subroutine are out of range.
'     lc     = length of taylor bubble cap in developing slug flow.(m)
'     lls    = length of liquid slug. (m)
'     lsu    = length of slug unit for developed slug flow. (m)            slug
'     lsua   = length of slug unit for developing slug flow. (m)
'     ltb    = length of taylor bubble in developed slug flow. (m)
'     ltba   = length of taylor bubble in developing slug flow. (m)
'     pga    = acceleration pressure gradient. (pa/m)
'     pgels  = elevation pressure gradient for liquid slug. (pa/m)
'     pgfls  = friction pressure gradient for liquid slug. (pa/m)
'     pgt    = total pressure gradient. (pa/m)
'     rels   = reynolds number for liquid slug.
'     vgls   = velocity of gas in liquid slug. (m/s)
'     vgtb   = velocity of gas in taylor bubble. (m/s)
'    *visg   = gas viscosity. (kg/m-s)
'    *visl   = liquid viscosity. (kg/m-s)
'     visns  = no-slip viscosity. (kg/m-s)
'     vlls   = velocity of liquid in  liquid slug. (m/s)
'     vltb   = velocity of liquid in taylor bubble. (m/s)
'     vmls   = velocity of mixture in liquid slug. (m/s)
'     vs     = slip velocity. (m/s)
'    *vsg    = superficial gas velocity. (m/s)
'     vsgls  = superficial gas velocity in liquid slug. (m/s)
'    *vsl    = superficial liquid velocity. (m/s)
'     vslls  = superficial liquid velocity in liquid slug. (m/s)
'     c,f and df are dummy variables.
'     (*indicates input variables)
'     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
Private Sub slug(angr, di, ed, denl, deng, visl, visg, vsl, vsg, surl, E, pgf, pge, pga, pgt, ioerr, ierr)
Dim lls As Double
Dim lsu As Double
Dim ltb As Double
Dim ltb1 As Double
Dim ltb2 As Double
Dim LC As Double
'Dim itsafe As Double
'     ^^^^^^^^^^^^^^^^^^^
'     check input variables for valid range.
'     ^^^^^^^^^^^^^^^^^^^
ierr = 0
If (angr <= 0# Or angr > 1.5708) Then
    
    addLogMsg "   slug: illegal value input for angr"
    ierr = 1
    ElseIf (di <= 0#) Then
    addLogMsg "   slug: illegal value input for di"
    ierr = 1
    ElseIf (ed < 0# Or ed >= 0.05) Then
    addLogMsg "   slug: illegal value input for ed"
    ierr = 1
    ElseIf (denl < 0#) Then
    addLogMsg "   slug: illegal value input for denl"
    ierr = 1
    ElseIf (deng < 0#) Then
    addLogMsg "   slug: illegal value input for denl"
    ierr = 1
    ElseIf (visl < 0#) Then
    addLogMsg "   slug: illegal value input for visl"
    ierr = 1
    ElseIf (visg < 0#) Then
    addLogMsg "   slug: illegal value input for visg"
    ierr = 1
    ElseIf (vsl < 0#) Then
    addLogMsg "   slug: illegal value input for vsl"
    ierr = 1
    ElseIf (vsg < 0#) Then
    addLogMsg "   slug: illegal value input for vsg"
    ierr = 1
    ElseIf (surl < 0#) Then
    addLogMsg "   slug: illegal value input for surl"
    ierr = 1
End If
If (ierr = 1) Then GoTo L999
'     -----------------------------------------------
'     assume lls to be 30 times the diameter of pipe.
'     -----------------------------------------------
lls = 30# * di
'     -----------------------------------------------------
'     calculate void fraction in taylor bubble using itsafe
'     and assuming developed slug flow.
'     -----------------------------------------------------
Dim vtb, vs, alfls, alfmin, alfmax, alfacc, alftb, vltb, vlls, vgls, vgtb, beta1, beta2, beta, g_, delmin, delmax, delacc, deln, alftbn, vgtbn, vltbn
vtb = 1.2 * (vsl + vsg) + 0.35 * Sqr(9.81 * di * (denl - deng) / denl)
vs = 1.53 * (9.81 * surl * (denl - deng) / denl ^ 2) ^ 0.25
alfls = vsg / (0.425 + 2.65 * (vsl + vsg))
alfmin = 0.7
alfmax = 0.9999
alfacc = 0.000001
L1:
alftb = itsafe(vsl, vsg, vtb, vs, alfls, di, 2, alfmin, alfmax, alfacc, ioerr, ierr)
If (ierr = 1) Then
    addLogMsg "   slug: error Close #ioerr:exit subed from itsafe", " call for alftb"
    GoTo L999
End If
'     --------------------------------
'     calculate additional parameters.
'     --------------------------------
vltb = 9.916 * Sqr(9.81 * di * (1# - Sqr(alftb)))
vlls = vtb - (vtb + vltb) * (1# - alftb) / (1# - alfls)
vgls = 1.2 * (vsl + vsg) + 1.53 * (9.81 * surl * (denl - deng) / denl ^ 2) ^ 0.25 * (1# - alfls) ^ 0.5
If (alfls > 0.25) Then vgls = vlls
vgtb = vtb * (1# - alfls / alftb) + vgls * alfls / alftb
beta1 = (vlls * (1# - alfls) - vsl) / (vltb * (1# - alftb) + vlls * (1# - alfls))
beta2 = (vsg - alfls * vgls) / (alftb * vgtb - alfls * vgls)
If (Abs(beta1 - beta2) > 0.1) Then
    addLogMsg "   slug: error in beta conv."
    ierr = 1
    GoTo L999
End If
beta = (beta1 + beta2) / 2#
If (beta <= 0# Or beta >= 1#) Then
    addLogMsg "   slug: unreal value for beta"
    ierr = 1
    GoTo L999
End If
lsu = lls / (1# - beta)
ltb = lsu - lls
'     ---------------------------------------------------------
'     calculate nusselt film thickness iteratively using itsafe
'     ---------------------------------------------------------
g_ = visl / (9.81 * (denl - deng))
delmin = 0.00001
delmax = 0.499 * di
delacc = 0.000001
deln = itsafe(di, vtb, vgls, vsl, vsg, g_, 3, delmin, delmax, delacc, ioerr, ierr)
If (ierr = 1) Then
    addLogMsg "   slug: error Close #ioerr:exit subed from itsafe call", " for deln"
    GoTo L999
End If
'     --------------------------------------------------------
'     calculate lc using the values of the parameters at deln.
'     --------------------------------------------------------
alftbn = (1# - 2# * deln / di) ^ 2
vgtbn = (vtb * alftbn - (vtb - vgls) * alfls) / alftbn
vltbn = (vgtbn * alftbn - (vsl + vsg)) / (1# - alftbn)
LC = (vltbn + vtb) ^ 2 / (2# * 9.81)
'     ---------------------------------
'     check for the nature of the flow.
'     ---------------------------------
Dim ind, c, d, f, h, alftba, alfsu, esu, dens, pgels
If (LC > (0.75 * ltb)) Then
    '        --------------------------------------------------------
    '        developing slug flow exists. calculate new values for
    '        slug flow parameters starting with the length of
    '        taylor  bubble by solving a quadratic equation.
    '        --------------------------------------------------------
    ind = 1
    c = (vsg - vgls * alfls) / vtb
    d = 1# - vsg / vtb
    E = vtb - vlls
    f = (-2# * d * c * lls - 2# * (E * (1# - alfls)) ^ 2 / 9.81) / d ^ 2
    g_ = (c * lls / d) ^ 2
    h = f * f - 4# * g_
    If (h <= 0#) Then
        addLogMsg "   slug: error in solving for ltb"
        ierr = 1
        GoTo L999
    End If
    ltb1 = (-f + Sqr(h)) / 2#
    ltb2 = (-f - Sqr(h)) / 2#
    If (ltb1 <= 0# And ltb2 <= 0#) Then
        addLogMsg "   slug: error in ltb root"
        ierr = 1
        GoTo L999
    End If
    If (ltb1 > ltb2) Then ltb = ltb1
    If (ltb2 > ltb1) Then ltb = ltb2
    alftba = 1# - 2# * (vtb - vlls) * (1# - alfls) / Sqr(2# * 9.81 * ltb)
    lsu = ltb + lls
    beta = ltb / lsu
    Else
    '     ---------------------------------------------------------------
    '     developed slug flow exists. no new values of the parameters are
    '     required.
    '     ---------------------------------------------------------------
    ind = 0
End If
'     ----------------------------------------
'     calculate liquid holdup for a slug unit.
'     ----------------------------------------
alfsu = alftb * beta + alfls * (1# - beta)
If (ind = 1) Then alfsu = alftba * beta + alfls * (1# - beta)
esu = 1# - alfsu
'     -----------------------------------------------------
'     calculate elevation pressure gradient for liquid slug
'     using its slip density.
'     -----------------------------------------------------
dens = denl * (1# - alfls) + deng * alfls
pgels = 9.81 * Sin(angr) * dens
'     -----------------------------------------------------------
'     calculate elevation pressure gradient for taylor  bubble
'     using its average void fraction.
'     -----------------------------------------------------------
Dim pgetb, vslls, vsgls, vmls, alfns, visns, rels, ffls, pgfls
If (ind = 1) Then
    pgetb = 9.81 * Sin(angr) * (deng * alftba + denl * (1 - alftba))
    Else
    pgetb = 9.81 * Sin(angr) * deng
End If
'     --------------------------------------------------
'     calculate frictional pressure gradient for liquid
'     slug.
'     --------------------------------------------------
vslls = vlls * (1# - alfls)
vsgls = vgls * alfls
vmls = vslls + vsgls
alfns = vsgls / vmls
visns = visl * (1# - alfns) + visg * alfns
rels = dens * vmls * di / visns
ffls = 64# / rels
If (rels > 2000#) Then
  'ffls = 0.25 / (log10(ed / 3.7 - 5.02 / rels * log10(ed / 3.7 + 13# / rels))) ^ 2
  ffls = 0.25 / (log10(2 * ed / di / 3.7 - 5.02 / rels * log10(2 * ed / di / 3.7 + 13# / rels))) ^ 2
End If
pgfls = dens * vmls ^ 2 * ffls / (2# * di)
'     --------------------------------------------------------
'     acceleration pressure gradient over a slug unit is zero.
'     --------------------------------------------------------
pga = 0#
'     ---------------------------------------------------------
'     assume constant pressure gradients and holdup for all the
'     slug units within one pipe increment.
'     ---------------------------------------------------------
E = esu
pge = pgels * (1# - beta) + pgetb * beta
pgf = pgfls * (1# - beta)
pgt = pge + pgf + pga
L999:
End Sub
'     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^*
'     mechanistic model for pressure gradient and liquid holdup in
'     annular-mist flow.
'     written by,    asfandiar m. ansari
'     revised by,    asfandiar m. ansari     last revision: march 1989
'              * *  tulsa university fluid flow projects  * *
'     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^*
'     this subroutine calculates liquid holdup and pressure gradient for
'     annular-mist flow using the mechanistic approach developed by ibere
'     alves. for interfacial friction two different correlations given
'     by wallis and whalley are used for different ranges of entrainment.
'     for entrainment correlation given by wallis is used. the subroutine
'     also checks the existence of annular flow by calling chkan which
'     is based on barnea"s criteria. the subroutine uses si units for
'     input data.
'                               references
'                               ----------
'     1.  alves, ibere n. et al., " modeling annular flow behavior for
'         gas wells. ",
'     2.  wallis, g. b., " one-dimensional two-phase flow. ",
'         mcgraw-hill, new york, (1969).
'     3.  barnea, d., " transition from annular flow and from dispersed
'         bubble flow - unified models for the whole range of pipe in-
'         clinations ", int. j. of multiphase flow, vol.12, (1986),
'         733-744.
'     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
'                   input/output logical file variables
'                   -----------------------------------
'     ioerr = output file for error messages when input values passed
'             to the subroutine are out of range or error occurs in
'             the calculation.
'                           subsubroutines called
'                           ------------------
'     caldel = this subroutine calculates thickness of liquid film
'              along the pipe wall.
'     calfe  = this subroutine calculates fraction of liquid entrained
'              in the core.
'     chkan  = this subroutine checks whether or not annular flow exist
'              using bridging and stability criteria due to barnea.
'     itsafe = this function iterates safely between the two extreme
'              limits of a variable. it is used to calculate deld and
'              delmax.
'                          variable description
'                          --------------------
'      alf   = void fraction with respect to pipe cross-section.
'      alfc  = void fraction in core with respect to core cross-section.
'     *angr  = angle of flow from horizontal. (rad)
'      c     = coefficient for deld in interfacial friction correlation.
'      deld  = ratio of film thickness to pipe diameter.
'      deldac= accuracy required in iteration for deld.
'      deldmn= lower limit for deld during iteration.
'      deldmx= upper limit for deld during iteration.
'     *deng  = gas density. (kg/cum)
'     *denl  = liquid density. (kg/cum)
'      denc  = density of core. (kg/cum)
'      dens  = slip density. (kg/cum)
'     *di    = inside pipe diameter. (m)
'      e     = liquid holdup fraction with respect to pipe cross-section.
'      ec    = liquid holdup in core with respect to core cross-section.
'      ef    = liquid holdup in film with respect to pipe cross-section.
'     *ed    = relative pipe roughness.
'      ff    = friction factor
'      ffcs  = friction factor for core based on recs.
'      ffls  = friction factor for entire liquid based on rels
'      fpat  = flow pattern, (chr)
'                 "anul" = annular
'                 "slug" = slug
'      ierr  = error code. (0=ok, 1=input variables out of range,
'              2=extrapolation of correlation occurring)
'     *ioerr = output file for error messages when input values
'              passed to the subroutine are out of range.
'      pga   = acceleration pressure gradient. (pa/m)
'      pge   = elevation pressure gradient. (pa/m)
'      pgec  = elevation pressure gradient in core. (pa/m)
'      pgef  = elevation pressure gradient in film. (pa/m)
'      pgf   = friction pressure gradient. (pa/m)
'      pgfc  = frictional pressure gradient in core. (pa/m)
'      pgfcs = frictional pressure gradient for core based on super-
'              ficial velocity. (pa/m)
'      pgff  = frictional pressure gradient in film. (pa/m)
'      pgfls = frictional pressure gradient for entire liquid based on
'              superficial liquid velocity. (pa/m)
'      pgt   = total pressure gradient. (pa.m)
'      phic2 = dimensionless group defined by alves.
'      phif2 = dimensionless group defined by alves.
'      recs  = core reynolds number based on superficial velocity.
'      rels  = liquid reynolds number based on superficial velocity.
'     *surl  = surface tension. (n/m)
'      visc  = core viscosity. (kg/m-s)
'     *visg  = gas viscosity. (kg/m-s)
'     *visl  = liquid viscosity. (kg/m-s)
'      visns = no-slip viscosity. (kg/m-s)
'      vsc   = superficial velocity of core. (m)
'     *vsg   = superficial gas velocity. (m/s)
'     *vsl   = superficial liquid velocity. (m/s)
'      xm2   = modified lockhart-martinelli dimensionless group.
'      xmo2  = modified lockhart-martinelli dimensionless group with
'              entrainment.
'      ym    = modified lockhart-martinelli dimensionless group.
'      a,f and df are dummy variables.
'      (*indicates input variables)
'     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
'     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^*
'     this subroutine checks whether annular flow exists or not.
'     written by,    asfandiar m. ansari
'     revised by,    asfandiar m. ansari      last revision: march 1989
'              * *  tulsa university fluid flow projects  * *
'     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^*
'     this subroutine checks the taitel,barnea & dukler prediction of an-
'     nular flow by using criteria developed by barnea. it checks annular
'     flow bridging caused by liquid holdup of greater than 0.24. it also
'     calculates maximum stable film thickness for annular flow and com-
'     pares it with the existing film thickness for the stability of the
'     annular flow. the subroutine calls itasfe to calculate maximum
'     stable film thickness iteratively. it uses dimensionless parameters
'     as input.
'                              references
'                              ----------
'     1. barnea, d., " transition from annular flow and from dispersed
'        bubble flow - unified models for the whole range of pipe in-
'        clinations ", int. j. of multiphase flow, vol.12, (1986),
'        733-744.
'     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
'                   input/output logical file variables
'                   -----------------------------------
'     ioerr = output file for error messages when input values passed
'             to the subroutine are out of range or error occurs in
'             the calculation.
'                           subsubroutines called
'                           ------------------
'     itsafe = this subroutine iterate safely within the specified
'              limits of the variable.
'     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
'                           variable description
'                           --------------------
'    *deld   = ratio of film thickness to pipe diameter.
'     e      = liquid holdup fraction at a pipe cross-section.
'     ec     = liquid holdup for core with respect to pipe cross-
'              section.
'     ef    = liquid holdup for film with respect to pipe cross-
'              section.
'    *ensc   = no-slip holdup for core with respect to core cross-
'              section.
'      fpat  = flow pattern, (chr)
'                 "anul" = annular
'                 "slug" = slug
'     ierr   = error code, (0=ok, 1=input variable out of range.)
'    *ioerr  = error message file.
'    *xmo2   = dimensionless group defined in  anmist.
'    *ym     = dimensionless group defined in  anmist.
'     (* indicates input variables)
'     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
Private Sub chkan(xmo2, ym, deld, ensc, E, fpat, ioerr, ierr)
' sub parameter : do not dim ! Dim fpat as string * 4
'Dim itsafe As Double
'     ------------------------------------------------------
'     calculate total liquid holdup at a pipe cross-section.
'     ------------------------------------------------------
Dim ef, ec, deldmx, deldmn, deldac, delds
ef = 4# * deld * (1# - deld)
ec = ensc * (1# - 2# * deld) ^ 2
E = ef + ec
If (E > 0.12) Then
    '        -----------------------------------------------
    '        annular flow is bridged resulting in slug flow.
    '        -----------------------------------------------
    fpat = "slug"
    Else
    '        ----------------------------------------------------
    '        calculate maximum stable film thickness using itsafe
    '        for iteration.
    '        ----------------------------------------------------
    deldmx = 0.499
    deldmn = 0.00001
    deldac = 0.00001
    delds = itsafe(xmo2, ym, 0#, 0#, 0#, 0#, 5, deldmn, deldmx, deldac, ioerr, ierr)
    If (ierr = 1) Then
       ' Open report.txt For Append As #1
        addLogMsg " chkan: error Close #ioerr:exit subed from itsafe", " call for delds"
        GoTo L999
    End If
    If (delds < deld) Then
        '            -----------------------------------
        '            film is unstable causing slug flow.
        '            -----------------------------------
        fpat = "slug"
        Else
        '            ---------------------------------------------
        '            annular flow is confirmed by barnea criteria.
        '            ---------------------------------------------
        fpat = "anul"
    End If
End If
L999:
End Sub
'     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^*
'     this function carries out iteration within a fixed limits of a
'     variable.
'     written by,    asfandiar m. ansari
'     revised by,    asfandiar m. ansari      last revision: march 1989
'              * *  tulsa university fluid flow projects  * *
'     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^*
'     this function uses newton-raphson technique for iteration. it
'     keeps the solution within the specified limits by using bisection
'     method when newton-raphson solution crosses the limits. subroutine
'     func is called to define function and its derivative needed by
'     newton-raphson technique. there is no restriction on the system of
'     units as long as func can incorporate it.
'                            references
'                            ----------
'    1. press, w. h., et al.," numerical recipes",cambridge university
'       press, new york (1986).
'     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
'                   input/output logical file variables
'                   -----------------------------------
'     ioerr = output file for error messages when input values passed
'             to the subroutine are out of range or error occurs in
'             the calculation.
'                           subsubroutines called
'                           ------------------
'     func = this defines function and its derivative to be used for
'            iteration.
'                          variable description
'                            --------------------
'     df    = value of the derivative of f during iteration.
'     dx    = difference between the two successive guesses.
'     dxold = previous dx.
'     f     = value of the function during iteration.
'     fh    = highest value of the function.
'     fl    = lowest value of the function.
'     i     = indicator for variable to be iterated,
'             + = holdup in  bubble flow.
'             2 = void fraction in taylor  bubble.
'             3 = nusselt film thickness around taylor  bubble.
'             4 = film thickness in annular flow.
'             5 = stable film thickness for annular film.
'     ierr  = error code, (0=ok, 1=input variable out of range.)
'    *ioerr = error message file.
'     j     = do loop variable.
'     maxit = iteration counter.
'     swap  = dummy variable used to swap or interchange fh and fl.
'     xh    = highest value for the variable.
'     xl    = lowest value for the variable.
'    *xacc  = accuracy acceptable for the solution.
'    *x1    = upper limit for the solution.
'    *x2    = lower limit for the solution.
'    *a,b,c,d,e and g are input dummy variables that define the
'     function.
'     (* indicates input variables)
'     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
Private Function itsafe(a, B, c, d, E, g_, i, x1, x2, xacc, ioerr, ierr)
'Dim itsafe As Double
'     --------------------------------
'     limit the iteration count to 100
'     --------------------------------
' parameter (ma
'     ---------------------------------------------------------
'     calculate values of the function and its derivative at x1
'     and x2.
'     ---------------------------------------------------------
Dim fl, df, fh, xl, xh, swap
Call func(a, B, c, d, E, g_, i, x1, fl, df)
Call func(a, B, c, d, E, g_, i, x2, fh, df)
'     ---------------------------------------------------------
'     interchange values of the function if it varies inversely
'     with the variable.
'     ---------------------------------------------------------
If (fl < 0#) Then
xl = x1
xh = x2
Else
xh = x1
xl = x2
swap = fl
fl = fh
fh = swap
End If
'     -------------------------------------------------
'     take the average of x1 and x2 as the first guess.
'     -------------------------------------------------
itsafe = 0.5 * (x1 + x2)
'     ---------------------------------------------------
'     define the difference in the two successive values.
'     ---------------------------------------------------
Dim dxold, dx
dxold = Abs(x2 - x1)
dx = dxold
'     ----------------------------------------
'     call func again to use the guessed value.
'     ----------------------------------------
Dim f, j, temp
Call func(a, B, c, d, E, g_, i, itsafe, f, df)
'     -----------------------------------------------------
'     carry out iteration by using newton-raphson method
'     together with bisection approach to keep the variable
'     within its limits.
'     -----------------------------------------------------
For j = 1 To MAXIT
    If (((itsafe - xh) * df - f) * ((itsafe - xl) * df - f) >= 0# Or Abs(2# * f) > Abs(dxold * df)) Then
    dxold = dx
    dx = 0.5 * (xh - xl)
    itsafe = xl + dx
    If (xl = itsafe) Then GoTo L999
    Else
    dxold = dx
    dx = f / df
    temp = itsafe
    itsafe = itsafe - dx
    If (temp = itsafe) Then GoTo L999
End If
If (Abs(dx) < xacc Or Abs(f) < xacc) Then GoTo L999
Call func(a, B, c, d, E, g_, i, itsafe, f, df)
If (f < 0#) Then
    xl = itsafe
    fl = f
    Else
    xh = itsafe
    fh = f
End If
If (f = 0#) Then GoTo L999
L5:
Next j
ierr = 1
'Open report.txt For Append As #1
addLogMsg " itsafe: no convergence even after 100", " iterations"
L999:
End Function
'     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
'     this subroutine defines a function and its derivative to be used
'     for iteration.
'     written by,    asfandiar m. ansari
'     revised by,    asfandiar m. ansari     last revision: march 1989
'              * *  tulsa university fluid flow projects  * *
'     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^*
'     this subroutine is called by itsafe to get standard function and
'     its derivative for newton-raphson iterative technique. the number
'     arguments for this subroutine are based on the number of variables
'     involved in the most complex function for which the subroutine is
'     called. for simpler functions most of the arguments are taken as
'     zero. the function to be used by itsafe is recognized by indicator
'     i.
'     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
'                           variable description
'                           --------------------
'     df   = derivative of f.
'     f    = function to be defined for iteration.
'     i    = indicator to select f.
'     x    = variable to be iterated.
'     a,b,c,d,e and f are input variables that define f.
'     t"s and dt"s are dummy variables and their derivatives.
'     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
Private Sub func(a, B, c, d, E, g_, i, X, f, df)
'     ----------------------------------------------------
'     initialize dummy variables that are repeatedly used.
'     ----------------------------------------------------
Dim t1, dt1, t2, dt2, t3, dt3, t4, dt4
t1 = 0#
dt1 = 0#
t2 = 0#
dt2 = 0#
t3 = 0#
dt3 = 0#
t4 = 0#
dt4 = 0#
Dim an, t5, t6, t7, t8, t9, t10, t11, t12, t13, t14, dt5, dt6, dt7, dt8, dt9, dt10, dt11, dt12, dt13, dt14, z, dz
If (i = 1) Then
    '        ------------------------------------------------
    '        define f and df to iterate for holdup in bubble.
    '        ------------------------------------------------
    an = 0.5
    f = c * X ^ an + 1.2 * (a + B) - B / (1# - X)
    df = an * c * X ^ (an - 1#) - B / (1# - X) ^ 2
    ElseIf (i = 2) Then
    '        ------------------------------------------------------
    '        define f and df to iterate for void fraction in taylor
    '         bubble in slug.
    '        ------------------------------------------------------
    t2 = Sqr(9.81 * g_ * (1# - Sqr(X)))
    t3 = 1# - X
    t4 = 1# - E
    t5 = 9.961 * t2
    t6 = c - (c + t5) * t3 / t4
    t7 = 1.2 * (a + B) + d * t4 ^ 0.5
    If (E > 0.25) Then t7 = t6
    t8 = c * (1# - E / X) + t7 * E / X
    t9 = t6 * t4 - a
    t10 = t5 * t3 + t6 * t4
    t11 = B - E * t7
    t12 = X * t8 - E * t7
    t13 = t9 / t10
    t14 = t11 / t12
    f = t13 - t14
    dt2 = -0.25 * 9.81 * g_ / t2 / Sqr(X)
    dt5 = 9.961 * dt2
    dt6 = -(dt5 * t3 / t4 - (c + t5) / t4)
    dt7 = 0#
    If (E > 0.25) Then dt7 = dt6
    dt8 = c * (E / X ^ 2) + dt7 * E / X - t7 * E / X ^ 2
    dt9 = dt6 * t4
    dt10 = dt5 * t3 - t5 + dt6 * t4
    dt11 = -E * dt7
    dt12 = t8 + X * dt8 - E * dt7
    dt13 = dt9 / t10 - t9 * dt10 / t10 ^ 2
    dt14 = dt11 / t12 - t11 * dt12 / t12 ^ 2
    df = dt13 - dt14
    ElseIf (i = 3) Then
    '        --------------------------------------------------------------
    '        define f and df to iterate for nusselt film thickness in slug.
    '        --------------------------------------------------------------
    t1 = E / (0.425 + 2.65 * (d + E))
    t2 = (1# - 2# * X / a) ^ 2
    t3 = (B * t2 - (B - c) * t1) / t2
    t4 = (t3 * t2 - (d + E)) / (1# - t2)
    f = X ^ 3 - 0.75 * a * g_ * t4 * (1# - t2)
    dt2 = -4# * (1# - 2# * X / a) / a
    dt3 = (B - c) * t1 * dt2 / t2 ^ 2
    dt4 = (dt3 * t2 + t3 * dt2) / (1# - t2) + (t3 * t2 - (d + E)) * dt2 / (1# - t2) ^ 2
    df = 3# * X ^ 2 - 0.75 * a * g_ * (dt4 * (1# - t2) - t4 * dt2)
    ElseIf (i = 4) Then
    '        --------------------------------------------------------
    '        define f and df to iterate for film thickness in anmist.
    '        --------------------------------------------------------
    t1 = 4# * X * (1# - X)
    z = 1# + c * X
    dt1 = 4# * (1# - 2# * X)
    dz = c
    f = B - z / t1 / (1# - t1) ^ 2.5 + a / t1 ^ 3
    df = -dz / t1 / (1# - t1) ^ 2.5 - 2.5 * z * dt1 / t1 / (1# - t1) ^ 3.5 + z * dt1 / t1 ^ 2 / (1# - t1) ^ 2.5 - 3# * a / t1 ^ 4 * dt1
    ElseIf (i = 5) Then
    '         -----------------------------------------------------------
    '         define f and df to iterate  stable film thickness in chkan.
    '         -----------------------------------------------------------
    t1 = 1# - (1# - 2# * X) ^ 2
    dt1 = 4# * (1# - 2# * X)
    '         ---------------------------------------------------
    '         to avoid division of f by 0, adjust x if necessary.
    '         ---------------------------------------------------
    t2 = 1# / t1
    If (t2 = 1.5) Then X = X + 0.001
    t1 = 1# - (1# - 2# * X) ^ 2
    dt1 = 4# * (1# - 2# * X)
    f = B - (2# - 1.5 * t1) * a / t1 ^ 3 / (1# - 1.5 * t1)
    df = 1.5 * dt1 * a / t1 ^ 3 / (1# - 1.5 * t1) + 3# * a * dt1 * (1# - 2# * t1) _
             * (2# - 1.5 * t1) / t1 ^ 4 / (1# - 1.5 * t1) ^ 2
End If
Exit Sub
Exit Sub
End Sub
'     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ u
'     upward flow pattern detection                                      u
'     written by,  caetano, triggia and shoham                           u
'     revised by,  lorri jefferson                      march 1989       u
'     revised by,  guohua zheng         last revision:  april 1989       u
'               * *  tulsa university fluid flow projects  * *           u
'     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ u
'                                                                        u
'     this subroutine detects flow patterns for any given set of         u
'     input data for upward two-phase flow.  the si system of units      u
'     is used.                                                           u
'                                                                        u
'                                                                        u
'                                references                              u
'                                ----------                              u
'                                                                        u
'     1.  e.f. caetano, o. shoham and a.a. triggia, "gas liquid          u
'            two-phase flow pattern prediction computer library",        u
'            journal of pipelines, 5 (1986) 207-220.                     u
'                                                                        u
'     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ u
'                                                                        u
'                                                                        u
'                   input/output logical file variables                  u
'                   -----------------------------------                  u
'                                                                        u
'    *ioerr  = output file for error messages when input values passed   u
'              to the subroutine are out of range or error occurs in     u
'              the calculation.                                          u
'                                                                        u
'                                                                        u
'                            subsubroutines called                          u
'                            ------------------                          u
'                                                                        u
'     fpup   = this subroutine detects the flow pattern for inclined     u
'              and vertical upward flow (+15 to +90 degrees).            u
'                                                                        u
'                                                                        u
'                           variable description                         u
'                           --------------------                         u
'                                                                        u
'    *ang    = angle of flow from horizontal. (deg)                      u
'    *deng   = gas density. (kg/m^3)                                    u
'    *denl   = liquid density. (kg/m^3)                                 u
'    *di     = inside pipe diameter. (m)                                 u
'    *ed     = relative pipe roughness                                   u
'     fpat   = flow pattern, (chr)                                       u
'                 " liq" = liquid                                        u
'                 " gas" = gas                                           u
'                 "bubl" = bubbly                                        u
'                 "slug" = slug                                          u
'                 "dbub" = dispersed bubble                              u
'                 "anul" = annular                                       u
'     ierr   = error code. (0=ok, 1=input variables out of range,        u
'                           2=extrapolation of correlation occurring)    u
'    *visg   = gas viscosity. (cp)                                       u
'    *visl   = liquid viscosity. (cp)                                    u
'     vsg    = superficial gas velocity. (m/sec)                         u
'     vsl    = superficial liquid velocity. (m/sec)                      u
'    *surl   = gas-liquid surface tension. (dynes/cm)                    u
'                                                                        u
'     (*indicates input variables)                                       u
'                                                                        u
'     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ u
'                                                                        u
Private Sub upfpdet(di, ed, denl, deng, visl, visg, ang, surl, vsl, vsg, fpat, ioerr, ierr)
'Dim fpat As String * 4
'                                                                        u
ierr = 0
'                                                                        u
'     ---------------------------                                        u
'     check for single phase flow                                        u
'     ---------------------------                                        u
'                                                                        u
If (vsl = 0#) Then
    fpat = " gas"
    GoTo L999
ElseIf (vsg = 0#) Then
    fpat = " liq"
    GoTo L999
End If
'
'     ------------------------------------
'     call fpup if ang is within the range
'     ------------------------------------
'
If (ang > 15# And ang <= 90#) Then
    Call fpup(vsl, vsg, di, ed, denl, deng, visl, visg, ang, surl, fpat, ioerr, ierr)
    If (ierr = 1) Then
        'Open report.txt For Append As #1
        addLogMsg "upfpdet: error Close #ioerr:exit subed from fpup call."
        GoTo L999
    End If
Else
    addLogMsg "upfpdet: angle out of range for upward flow."
    ierr = 1
End If
'
L999:
End Sub
'
'     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
'     this subroutine detects the flow pattern for inclined
'     and vertical upward flow (+15 to +90 degrees)
'     written by,  caetano, shoham and triggia
'     revised by,  lorri jefferson                      march 1989
'     revised by,  guohua zheng         last revision:  april 1989
'               * *  tulsa university fluid flow projects  * *
'     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
'     this subroutine detects the flow pattern for inclined and vertical
'     upward flow (+15 to +90 degrees).  the si system of units is used.
'                                references
'                                ----------
'     1.  e.f. caetano, o. shoham and a.a. triggia, "gas liquid
'            two-phase flow pattern prediction computer library",
'            journal of pipelines, 5 (1986) 207-220.
'     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
'                   input/output logical file variables
'                   -----------------------------------
'    *ioerr  = output file for error messages when input values passed
'              to the subroutine are out of range or error occurs in
'              the calculation.
'                            subsubroutines called
'                            ------------------
'     dbtran = this subroutine detects the dispersed bubble transition.
'     mpoint = this subroutine calculates the transition boundaries for
'              upward vertical flow.
'                           variable description
'                           --------------------
'     alfa   = angle of flow from horizontal. (radians)
'    *ang    = angle of flow from horizontal. (deg)
'    *deng   = gas density. (kg/m^3)
'    *denl   = liquid density. (kg/m^3)
'    *di     = inside pipe diameter. (m)
'    *ed     = relative pipe roughness
'     fpat   = flow pattern, (chr)
'                 " liq" = liquid
'                 " gas" = gas
'                 "bubl" = bubbly
'                 "slug" = slug
'                 "dbub" = dispersed bubble
'                 "anul" = annular
'     ierr   = error code. (0=ok, 1=input variables out of range,
'                           2=extrapolation of correlation occurring)
'    *visg    = gas viscosity. (cp)
'    *visl    = liquid viscosity. (cp)
'    *vsg     = superficial gas velocity. (m/sec)
'    *vsl     = superficial liquid velocity. (m/sec)
'    *surl    = gas-liquid surface tension. (dynes/cm)
'     (*indicates input variables)
'     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
Private Sub fpup(vsl, vsg, di, ed, denl, deng, visl, visg, ang, surl, fpat, ioerr, ierr)
' sub parameter : do not dim ! Dim fpat as string * 4
ierr = 0
'     ---------------------------
'     check for single phase flow
'     ---------------------------
If (vsl = 0#) Then
    fpat = " gas"
    GoTo L999
    ElseIf (vsg = 0#) Then
    fpat = " liq"
    GoTo L999
End If
'g_ = 9.81
Dim alfa, vsgo, vsg1, vsl1, vsg2, vsl2, vsg3, vsl3
alfa = 0.0174533 * ang
'     -----------------------------------------
'     calculate points on transition boundaries
'     -----------------------------------------
Call mpoint(di, ed, denl, deng, visl, visg, ang, surl, vsgo, vsg1, vsl1, vsg2, vsl2, vsg3, vsl3, ioerr, ierr)
If (ierr = 1) Then
    'Open report.txt For Append As #1
    addLogMsg "fpup: error Close #ioerr:exit subed from mpoint call."
    GoTo L999
End If
'     ----------------------
'     check for annular flow
'     ----------------------
If (vsg < vsg3) Then GoTo L10
fpat = "anul"
GoTo L999
'     -----------------------------------------
'     check for bubble/slug or dispersed-bubble
'     -----------------------------------------
L10:
If (vsg > vsg2) Then GoTo L20
'     --------------------------
'     test the boundary line "b"
'     --------------------------
Dim vslb
Call dbtran(0#, vslb, vsg, di, ed, denl, deng, visl, visg, ang, surl, ioerr, ierr)
If (ierr = 1) Then
    addLogMsg "fpup: error Close #ioerr:exit subed from dbtran call."
    GoTo L999
End If
If (vsl < vslb) Then GoTo L40
fpat = "dbub"
GoTo L999
'     --------------------------
'     test the boundary line "c"
'     --------------------------
L20:
vslb = vsg / 0.76 - vsg
If (vsl >= vslb) Then GoTo L30
fpat = "slug"
GoTo L999
L30:
fpat = "dbub"
GoTo L999
'     ------------------------
'     check for bubble or slug
'     ------------------------
L40:
If (vsgo > 0#) Then GoTo L50
fpat = "slug"
GoTo L999
L50:
Dim vsgb
vsgb = (vsl + 1.15 * (const_g * (denl - deng) * surl / denl ^ 2) ^ 0.25 * Sin(alfa)) / 3#
If (vsg > vsgb) Then GoTo L60
fpat = "bubl"
GoTo L999
L60:
fpat = "slug"
L999:
End Sub
'     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
'     transition boundaries for upward vertical flow
'     written by,  caetano, shoham, and triggia
'     revised by,  lorri jefferson                      march 1989
'     revised by,  guohua zheng         last revision:  april 1989
'               * *  tulsa university fluid flow projects  * *
'     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
'     this subroutine calculates points on the transition boundaries for
'     upward vertical flow.  the si system of units is used.
'                                references
'                                ----------
'     1.  e.f. caetano, o. shoham and a.a. triggia, "gas liquid
'            two-phase flow pattern prediction computer library",
'            journal of pipelines, 5 (1986) 207-220.
'     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
'                   input/output logical file variables
'                   -----------------------------------
'    *ioerr  = output file for error messages when input values passed
'              to the subroutine are out of range or error occurs in
'              the calculation.
'                            subsubroutines called
'                            ------------------
'     dbtran = this subroutine detects the dispersed bubble transition.
'                          variable description
'                          --------------------
'     alfa   = angle of flow from horizontal. (radians)
'    *ang    = angle of flow from horizontal. (deg)
'    *deng   = gas density. (kg/m^3)
'    *denl   = liquid density. (kg/m^3)
'    *di     = inside pipe diameter. (m)
'    *ed     = relative pipe roughness
'     ierr   = error code. (0=ok, 1=input variables out of range,
'                           2=extrapolation of correlation occurring)
'    *visg   = gas viscosity. (cp)
'    *visl   = liquid viscosity. (cp)
'     vsgs   = superficial gas velocity on transition boundaries.
'              (m/sec)
'     vsls   = superficial liquid velocity on transition boundaries.
'              (m/sec)
'    *surl   = gas-liquid surface tension. (dynes/cm)
'     (*indicates input variables)
'     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
Private Sub mpoint(di, ed, denl, deng, visl, visg, ang, surl, vsgo, vsg1, vsl1, vsg2, vsl2, vsg3, vsl3, ioerr, ierr)
ierr = 0
'g_ = 9.81
Dim alfa, alf, DMin
alfa = 0.0174533 * ang
'     -----------------------------------------------------------
'     calculate vsgo
'     minimum pipe diameter and inclination angle for bubble flow
'     existed at low liquid flow rates
'     -----------------------------------------------------------
alf = 57.295755 * alfa
DMin = 19# * Sqr((denl - deng) * surl / (denl ^ 2 * const_g))
Dim vsl
If (alf > 70# And di > DMin * 0.95) Then
    vsl = 0.001
    vsgo = (vsl + 1.15 * (const_g * (denl - deng) * surl / denl ^ 2) ^ 0.25 * Sin(alfa)) / 3#
    Else
    vsgo = -1#
End If
'     --------------
'     calculate vsg3
'     --------------
vsg3 = 3.1 * (surl * const_g * Sin(alfa) * (denl - deng)) ^ 0.25 / Sqr(deng)
'     --------------
'     calculate vsg1
'     --------------
vsg1 = -1#
vsl1 = -1#
If (vsgo > 0#) Then Call dbtran(0.25, vsl1, vsg1, di, ed, denl, deng, visl, visg, ang, surl, ioerr, ierr)
If (ierr = 1) Then
    'Open report.txt For Append As #1
    addLogMsg "mpoint: error Close #ioerr:exit subed from dbtran call."
    GoTo L999
End If
'     --------------
'     calculate vsg2
'     --------------
vsg2 = 0.2
Call dbtran(0.76, vsl2, vsg2, di, ed, denl, deng, visl, visg, ang, surl, ioerr, ierr)
If (ierr = 1) Then
    addLogMsg "mpoint: error Close #ioerr:exit subed from dbtran call."
    GoTo L999
End If
If (vsg2 >= vsg3) Then
    vsg2 = vsg3
    Call dbtran(0#, vsl2, vsg2, di, ed, denl, deng, visl, visg, ang, surl, ioerr, ierr)
    If (ierr = 1) Then
        addLogMsg "mpoint: error Close #ioerr:exit subed from dbtran call."
        GoTo L999
    End If
    vsl3 = vsl2
    If (vsg1 < vsg2) Then GoTo L999
    vsg1 = vsg2
    GoTo L999
End If
'     -----------------------------------
'     calculate vsl3 on boundary line "c"
'     -----------------------------------
vsl3 = (vsg3 / 0.76 - vsg3)
L999:
End Sub
'     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
'     dispersed bubble transition.
'     written by,  caetano, triggia and shoham
'     revised by,  lorri jefferson                      march 1989
'     revised by,  guohua zheng         last revision:  april 1989
'               * *  tulsa university fluid flow projects  * *
'     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
'     this subroutine determines dispersed bubble transition boundaries.
'     the si system of units is used.
'                                references
'                                ----------
'     1.  e.f. caetano, o. shoham and a.a. triggia, "gas liquid
'            two-phase flow pattern prediction computer library",
'            journal of pipelines, 5 (1986) 207-220.
'     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
'                   input/output logical file variables
'                   -----------------------------------
'    *ioerr  = output file for error messages when input values passed
'              to the subroutine are out of range or error occurs in
'              the calculation.
'                          variable description
'                          --------------------
'    *ang    = angle of flow from horizontal. (deg)
'    *deng   = gas density. (kg/m^3)
'    *denl   = liquid density. (kg/m^3)
'    *di     = inside pipe diameter. (m)
'    *ed     = relative pipe roughness
'     ierr   = error code. (0=ok, 1=input variables out of range,
'                           2=extrapolation of correlation occurring,
'                           3=calculation proceeds without convergence)
'    *hgg    = guessed gas void fraction
'    *visg   = gas viscosity. (cp)
'    *visl   = liquid viscosity. (cp)
'    *vsg    = superficial gas velocity. (m/sec)
'    *vsl    = superficial liquid velocity. (m/sec)
'     (*indicates input variables, vsg and vsl Close #ioerr:exit subed to calling
'      subroutine)
'     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
Private Sub dbtran(hgg, vsl, vsg, di, ed, denl, deng, visl, visg, ang, surl, ioerr, ierr)
ierr = 0
'g_ = 9.81
'     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
'     trial and error calculation of dispersed bubble transition
'     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
Dim c, vme, iter
c = 2# * ((0.4 * surl) / ((denl - deng) * const_g)) ^ 0.5 * (denl / surl) ^ 0.6 * (2# / di) ^ 0.4
'     ---------------------------
'     estimate a mixture velocity
'     ---------------------------
vme = vsg + 1.5
'     ---------------
'     start iteration
'     ---------------
iter = 0
L10:
Dim Hg
If (hgg = 0#) Then
    Hg = vsg / vme
ElseIf (hgg > 0#) Then
    Hg = hgg
    vsg = Hg * vme
    vsl = vme - vsg
Else
    'Open report.txt For Append As #1
    addLogMsg "dbtran: illegal value input for hgg"
    ierr = 1
End If
'     --------------------
'     get frictional factor
'     ---------------------
Dim rhom, vism, Re, FFM
rhom = denl * (1# - Hg) + deng * Hg
vism = visl * (1# - Hg) + visg * Hg
Re = di * rhom * vme / vism
 'FFM = calc_friction_factor(RE, ed, 1)
Call FRFACT(Re, ed, di, FFM, ioerr, ierr)
If (ierr = 1) Then
    addLogMsg "dbtran: error Close #ioerr:exit subed from frfact call."
    GoTo L999
End If
'     ------------------------------
'     calculate new mixture velocity
'     ------------------------------
Dim vmc, ratio
vmc = ((0.725 + 4.15 * Sqr(Hg)) / c / (FFM / 4#) ^ 0.4) ^ 0.8333
ratio = vmc / vme
'     ---------------------
'     check for convergence
'     ---------------------
If (ratio >= 0.99 And ratio <= 1.01) Then
    GoTo L20
Else
    iter = iter + 1
    If (iter <= 50) Then
        vme = (vmc + vme) / 2#
        GoTo L10
    Else
        vme = (vmc + vme) / 2#
        If ratio < 0.8 Then addLogMsg "dbtran: calculation proceeds without ", "convergence on vm after 50 iterations. ratio = " & Format(ratio, "0.000")
        'скорре всего итерация не будет сходиться тут при Re около 2000 - трение меняется не монотонно и критерий Барнеа точно не сходится
        ierr = 3
        GoTo L20
    End If
End If
'     -----------------------------
'     Close #ioerr:exit sub with calculated values
'     -----------------------------
L20:
Dim vm
vm = (vmc + vme) / 2#
vsl = vm * (1# - hgg)
If (hgg > 0#) Then vsg = vm * hgg
L999:
End Sub
'     ******************************************************************  'FRFACT
'     THIS SUBROUTINE CALCULATES MOODY FRICTION FACTOR                    'FRFACT
'     WRITTEN BY:  J. P. Brill                                            'FRFACT
'     REVISED BY:  F. Kung                LAST REVISION:  FEBRUARY 1989   'FRFACT
'              * *  TULSA UNIVERSITY FLUID FLOW PROJECTS  * *             'FRFACT
'     ******************************************************************  'FRFACT
'                                                                         'FRFACT
'     This subroutine calculates the Moody Friction Factor using either   'FRFACT
'     the Laminar Flow or the Colebrook Equations.  If flow is not        'FRFACT
'     Laminar (RE < 2000) use a Jain Friction Factor for the first        'FRFACT
'     guess in the Colebrook Equation.  The English system of units is    'FRFACT
'     used in the calculation.                                            'FRFACT
'                                                                         'FRFACT
'     ******************************************************************  'FRFACT
'                                                                         'FRFACT
'                   INPUT/OUTPUT LOGICAL FILE VARIABLES                   'FRFACT
' -----------------------------------                                     'FRFACT
'                                                                         'FRFACT
'     IOERR = Output file for error messages when input values            'FRFACT
'             passed to the subroutine are out of range.                  'FRFACT
'                                                                         'FRFACT
'                                                                         'FRFACT
'                           VARIABLE DESCRIPTION                          'FRFACT
' -------------------   -                                                 'FRFACT
'                                                                         'FRFACT
'     *ED    = Relative roughness.                                        'FRFACT
'      FFM   = Moody Fraction Factor.                                     'FRFACT
'      FGI   = Guesses of Moody Fraction Factor.                          'FRFACT
'      IERR  = Error code. (0=OK, 1=input variables out of range,         'FRFACT
'              2=extrapolation of correlation occuring)                   'FRFACT
'     *IOERR = Output file for error messages when input values           'FRFACT
'              passed to the subroutine are out of range.                 'FRFACT
'     *RE    = Reynolds Number.                                           'FRFACT
'                                                                         'FRFACT
'      F,I   = Dummy variable.                                            'FRFACT
'      (* Indicates input variables)                                      'FRFACT
'                                                                         'FRFACT
'     ******************************************************************  'FRFACT
'                                                                         'FRFACT
  Private Sub FRFACT(Re, ed, di, FFM, ioerr, ierr)                                   'FRFACT
'                                                                         'FRFACT
'     **************************************                              'FRFACT
'     Check input variables for valid range.                              'FRFACT
'     **************************************                              'FRFACT
'                                                                         'FRFACT
   
    ierr = 0
      If (Re < 0) Then                                                    'FRFACT
      '    WRITE (IOERR,*) ''FRFACT:  Illegal input value for RE'         'FRFACT
         ierr = 1                                                         'FRFACT
      ElseIf (ed < 0) Or (ed > 0.05) Then                                 'FRFACT
       '  WRITE (IOERR,*) ''FRFACT:  Illegal input value for ED'          'FRFACT
         ierr = 1                                                         'FRFACT
      End If                                                              'FRFACT
      If (ierr = 1) Then
       Exit Sub
      End If                                                              'FRFACT
      
'     **********************                                              'FRFACT
'     End of validity check.                                              'FRFACT
'     **********************                                              'FRFACT
      If (Re <= 2000) Then                                                'FRFACT
' ---------------------------------------'FRFACT
'     Calculate Laminar Flow Friction Factor.                             'FRFACT
' ---------------------------------------'FRFACT
         FFM = 64 / Re                                                    'FRFACT
      Else                                                                'FRFACT
'                                                                         'FRFACT
' ------------------------------------------------------------            'FRFACT
'     Calculate Moody Friction Factor with Jain Equation for first        'FRFACT
'     guess in Colebrook Equation.                                        'FRFACT
' ------------------------------------------------------------            'FRFACT
'                                                                         'FRFACT
         Dim FGI
         'FGI = 1 / (1.14 - 2 * log10(ed + 21.25 / Re ^ 0.9)) ^ 2          'FRFACT
        FGI = 0.25 / (log10(2 * ed / di / 3.7 - 5.02 / Re * log10(2 * ed / di / 3.7 + 13# / Re))) ^ 2
' ------------------------------------------------------------            'FRFACT
'     Set counter. Colebrook Equation is iterative. If convergence        'FRFACT
'     is not attained in 10 iterations an infinite loop will              'FRFACT
'     probably occur. Set friction factor equal to the value              'FRFACT
'     determined in the 10 th iteration and use with caution.             'FRFACT
' ------------------------------------------------------------            'FRFACT
'                                                                         'FRFACT
         Dim i, f, DIFF
         i = 1                                                            'FRFACT
'1:        f = 1.14 - 2 * log10(ed + 9.34 / (Re * Sqr(FGI)))
1:          f = 1.74 - 2 * log10(2 * ed / di + 18.7 / (Re * Sqr(FGI)))
         FFM = (1 / f) ^ 2                                                'FRFACT
         DIFF = Abs(FGI - FFM)                                            'FRFACT
         If (DIFF > 0.0001) Then                                          'FRFACT
            FGI = (FGI + FFM) / 2                                         'FRFACT
            i = i + 1                                                     'FRFACT
            If (i < 10) Then                                              'FRFACT
               GoTo 1                                                     'FRFACT
            Else 'FRFACT
               ierr = 2                                                   'FRFACT
  '             WRITE(IOERR,*)''FRFACT: Convergence of FFM not obtained', 'FRFACT
  '   +                       ' in 10 iterations.  Proceed with last',    'FRFACT
  '   +                       ' value with caution.'                      'FRFACT
            End If                                                        'FRFACT
            FFM = FGI                                                     'FRFACT
         End If                                                           'FRFACT
      End If                                                              'FRFACT
'                                                                         'FRFACT
      
End Sub
'=======================================================================================
'Unifloc7.3  Testudines                                           khabibullinra@gmail.com
'Библиотека расчетных модулей по нефтяному инжинирингу
'2000 - 2018 г
'
'=======================================================================================
         
         
         
Public Function unf_BegsBrillGradient(ByVal arr_d_m As Double, _
                                  ByVal arr_theta_deg As Double, ByVal eps_m As Double, _
                                  ByVal Ql_rc_m3day As Double, ByVal Qg_rc_m3day As Double, _
                                  ByVal Mul_rc_cP As Double, ByVal Mug_rc_cP As Double, _
                                  ByVal sigma_l_Nm As Double, _
                                  ByVal rho_lrc_kgm3 As Double, _
                                  ByVal rho_grc_kgm3 As Double, _
                                  Optional Payne_et_all_holdup As Integer = 0, _
                                  Optional Payne_et_all_friction As Integer = 1, _
                                  Optional betta_grav As Double = 1, _
                                  Optional betta_fric As Double = 1, Optional p_atma As Double)
'function for calculation of pressure gradient in pipe according to Begs and Brill method
'Return (psi/ft (atma/m))
'Arguments
'd - pipe internal diameter ( (m))
'arr_theta_deg - pipe inclination angel (degrees)
'eps_m - pipe wall roughness ( (m))
'p - reference pressure ( (atma))
'q_oSC - oil rate at standard conditions ( (m3/day))
'q_wSC - water rate at standard conditions ( (m3/day))
'q_gSC - gas rate at standard conditions ((m3/day))
'Bo_m3m3 - oil formation volume factor at reference pressure ( (m3/sm3))
'Bw_m3m3 - water formation volume factor at reference pressure ( (m3/sm3))
'Bg_m3m3 - gas formation volume factorat reference pressure ( (m3/sm3))
'rs - gas-oil solution ratio at reference pressure ( (sm3/sm3))
'Muo_cP - oil viscosity at reference pressure (cp)
'Muw_cP - water viscosity at reference pressure (cp)
'Mug_cP - gAs viscosity at reference pressure (cp)
'sigma_o_Nm - oil-gAs surface tension coefficient ((Newton/m))
'sigma_w_Nm - water-gAs surface tension coefficient ( (Newton/m))
'rho_oSC - oil density at standard conditions ( (kg/m3))
'rho_wSC - water density at standard conditions ( (kg/m3))
'rho_gSC - gas density at standard conditions((kg/m3))
'
'Payne_et_all_holdup - flag indicationg weather to applied Payne et all correction and holdup (0 - not applied, 1 - applied)
'Payne_et_all_friction - flag indicationg weather to apply Payne et all correction for friction (0 - not applied, 1 - applied)
'dpdl_g - used to otput pressure gradient due to gravity ( (atma/m))
'dpdl_f - used to output pressure gradient due to friction ( (atma/m))
'v_sl - used to output liquid superficial velocity ( (m/sec))
'v_sg - used to output gas superficial velocity ( (m/sec))
'h_l - used to output liquid holdup
'Calculate auxilary values
Dim roughness_d As Double
 
Dim dPdLg_out_atmm As Double
Dim dPdLf_out_atmm As Double
Dim Hl_out_fr As Double
Dim fpat_out_num
Dim dPdLa_out_atmm As Double
Dim Ap_m2 As Double ' площадь трубы
Dim lambda_l   As Double
Dim Vsl_msec, Vsg_msec, Vsm_msec As Double
Dim Rho_n_kgm3 As Double   ' no slip density
Dim rho_s As Double        ' mix density
Dim Mu_n_cP As Double
Dim n_re As Double 'Reinolds number
Dim n_fr As Double 'Froude number
Dim n_lv As Double 'Liquid velocity number
Dim flow_pattern As Integer
Dim l_2, l_3, l_1, l_4, aa As Double
Dim f_n As Double ' normalized friction factor
Dim f As Double ' friction factor
Dim Y, s As Double
Const c_p = 0.000009871668   ' переводной коэффициент
Ap_m2 = const_Pi * arr_d_m ^ 2 / 4
lambda_l = Ql_rc_m3day / (Ql_rc_m3day + Qg_rc_m3day)
roughness_d = eps_m / arr_d_m
Vsl_msec = const_conver_sec_day * Ql_rc_m3day / Ap_m2
Vsg_msec = const_conver_sec_day * Qg_rc_m3day / Ap_m2
Vsm_msec = Vsl_msec + Vsg_msec
Rho_n_kgm3 = rho_lrc_kgm3 * lambda_l + rho_grc_kgm3 * (1 - lambda_l) ' No-slip mixture density
Mu_n_cP = Mul_rc_cP * lambda_l + Mug_rc_cP * (1 - lambda_l) ' No slip mixture viscosity
n_re = 1000 * Rho_n_kgm3 * Vsm_msec * arr_d_m / Mu_n_cP
n_fr = Vsm_msec ^ 2 / (const_g * arr_d_m)
n_lv = Vsl_msec * (rho_lrc_kgm3 / (const_g * sigma_l_Nm)) ^ 0.25
l_1 = 316 * lambda_l ^ 0.302
l_2 = 0.000925 * lambda_l ^ -2.468
l_3 = 0.1 * lambda_l ^ -1.452
l_4 = 0.5 * lambda_l ^ -6.738
'-----------------------------------------------------------------------
'determine flow pattern
If (n_fr >= l_1 And lambda_l < 0.4 Or n_fr > l_4 And lambda_l >= 0.4) Then
  flow_pattern = 2
Else
  If (n_fr < l_2 And lambda_l >= 0.01 Or n_fr < l_1 And lambda_l < 0.01) Then
    flow_pattern = 0
  Else
    If (n_fr < l_3 And n_fr >= l_2 And lambda_l >= 0.01) Then
      flow_pattern = 3
    Else
    If (n_fr > l_3 And n_fr <= l_1 And lambda_l >= 0.01 And lambda_l < 0.4 Or lambda_l >= 0.4 And n_fr > l_3 And n_fr <= l_4) Then
      flow_pattern = 1
    End If
  End If
End If
End If
      
'-----------------------------------------------------------------------
'determine liquid holdup
If (flow_pattern = 0 Or flow_pattern = 1 Or flow_pattern = 2) Then
  Hl_out_fr = h_l_arr_theta_deg(flow_pattern, lambda_l, n_fr, n_lv, arr_theta_deg, Payne_et_all_holdup)
Else
  aa = (l_3 - n_fr) / (l_3 - l_2)
  Hl_out_fr = aa * h_l_arr_theta_deg(0, lambda_l, n_fr, n_lv, arr_theta_deg, Payne_et_all_holdup) + _
            (1 - aa) * h_l_arr_theta_deg(1, lambda_l, n_fr, n_lv, arr_theta_deg, Payne_et_all_holdup)
End If
'Calculate normalized friction factor
f_n = unf_calc_friction_factor(n_re, roughness_d, Payne_et_all_friction)
'calculate friction factor correction for multiphase flow
Y = max(lambda_l / Hl_out_fr ^ 2, 0.001)
If (Y > 1 And Y < 1.2) Then
  s = Log(2.2 * Y - 1.2)
Else
  s = Log(Y) / (-0.0523 + 3.182 * Log(Y) - 0.8725 * (Log(Y)) ^ 2 + 0.01853 * (Log(Y)) ^ 4)
End If
'calculate friction factor
f = f_n * Exp(s)
'calculate mixture density
rho_s = rho_lrc_kgm3 * Hl_out_fr + rho_grc_kgm3 * (1 - Hl_out_fr)
'calculate pressure gradient due to gravity
dPdLg_out_atmm = c_p * rho_s * const_g * sind(arr_theta_deg)
'calculate pressure gradient due to friction
dPdLf_out_atmm = c_p * f * Rho_n_kgm3 * Vsm_msec ^ 2 / (2 * arr_d_m)
'calculate pressure gradient
dPdLa_out_atmm = 1 - Vsm_msec * Rho_n_kgm3 * Vsg_msec / p_atma / 100000 ' not acounted in BeggsBrill
' Hl_out_fr рассчитано по ходу дела
fpat_out_num = flow_pattern
unf_BegsBrillGradient = Array((dPdLg_out_atmm * betta_grav + dPdLf_out_atmm * betta_fric) / dPdLa_out_atmm, _
                            dPdLg_out_atmm * betta_grav, _
                            dPdLf_out_atmm * betta_fric, _
                            c_p * Vsm_msec * Rho_n_kgm3 * Vsg_msec / p_atma / 100000, _
                            Vsl_msec, _
                            Vsg_msec, _
                            Hl_out_fr, _
                            fpat_out_num)
' dPdLa_out_atmm, _
End Function
Private Function h_l_arr_theta_deg(flow_pattern As Integer, ByVal lambda_l As Double, ByVal n_fr As Double, _
                    ByVal n_lv As Double, ByVal arr_theta_deg As Double, ByVal Payne_et_all As Integer) As Double
'function calculating liquid holdup
'flow_pattern - flow pattern (0 -Segregated, 1 - Intermittent, 2 - Distributed)
'lambda_l - volume fraction of liquid at no-slip conditions
'n_fr - Froude number
'n_lv - liquid velocity number
'arr_theta_deg - pipe inclination angle, (Degrees)
'payne_et_all - flag indicationg weather to applied Payne et all correction for holdup (0 - not applied, 1 - applied)
'Constants to determine liquid holdup
Dim a(3) As Double
a(0) = 0.98: a(1) = 0.845: a(2) = 1.065
Dim B(3) As Double
B(0) = 0.4846: B(1) = 0.5351: B(2) = 0.5824
Dim c(3) As Double
c(0) = 0.0868: c(1) = 0.0173: c(2) = 0.0609
'constants to determine liquid holdup correction
Dim E(3) As Double
E(0) = 0.011: E(1) = 2.96: E(2) = 1
Dim f(3) As Double
f(0) = -3.768: f(1) = 0.305: f(2) = 0
Dim G(3) As Double
G(0) = 3.539: G(1) = -0.4473: G(2) = 0
Dim h(3) As Double
h(0) = -1.614: h(1) = 0.0978: h(2) = 0
'calculate liquid holdup at no slip conditions
Dim h_l_0 As Double
h_l_0 = a(flow_pattern) * lambda_l ^ B(flow_pattern) / n_fr ^ c(flow_pattern)
'calculate correction for inclination angle
Dim cc As Double
cc = max(0, (1 - lambda_l) * Log(E(flow_pattern) * lambda_l ^ f(flow_pattern) * n_lv ^ G(flow_pattern) * n_fr ^ h(flow_pattern)))
Dim psi As Double
'convert angle to radians
Dim arr_theta_deg_d As Double
arr_theta_deg_d = const_Pi / 180 * arr_theta_deg
psi = 1 + cc * (Sin(1.8 * arr_theta_deg_d) - 0.333 * (Sin(1.8 * arr_theta_deg_d)) ^ 3)
'calculate liquid holdup with payne et al. correction factor
If Payne_et_all > 0 Then
  
  If arr_theta_deg > 0 Then 'uphill flow
    
    h_l_arr_theta_deg = max(min(1, 0.924 * h_l_0 * psi), lambda_l)
  
  Else  'downhill flow
    
    h_l_arr_theta_deg = max(min(1, 0.685 * h_l_0 * psi), lambda_l)
  
  End If
Else
  
  h_l_arr_theta_deg = max(min(1, h_l_0 * psi), lambda_l)
End If
End Function
 
    
Public Function unf_UnifiedTUFFPGradient(ByVal arr_d_m As Double, _
                                  ByVal arr_theta_deg As Double, ByVal eps_m As Double, _
                                  ByVal Ql_rc_m3day As Double, ByVal Qg_rc_m3day As Double, _
                                  ByVal Mul_rc_cP As Double, ByVal Mug_rc_cP As Double, _
                                  ByVal sigma_l_Nm As Double, _
                                  ByVal rho_lrc_kgm3 As Double, _
                                  ByVal rho_grc_kgm3 As Double, _
                                  ByVal p_atma As Double, _
                                  Optional ByVal ZNLF As Boolean = False, _
                                  Optional betta_grav As Double = 1, _
                                  Optional betta_fric As Double = 1)
 
 Dim dPdLg_out_atmm As Double
 Dim dPdLf_out_atmm As Double
 Dim Hl_out_fr As Double
 Dim fpat_out_num
 Dim dPdLa_out_atmm As Double
 Dim dPdL_out_atmm As Double
 Dim roughness_d As Double
 Dim Ap_m2 As Double ' площадь трубы
 Dim lambda_l   As Double
 Dim Vsl_msec, Vsg_msec
 Dim pgf_out As Double
 Dim pge_out As Double
 Dim pga_out As Double
 Dim pgt_out As Double
 Dim ierr As Double
 Dim vf, hlf, sl, Ff, hls, cu, fqn, rsu, icon, cs, cf, vc
 
 roughness_d = eps_m / arr_d_m
 Ap_m2 = const_Pi * arr_d_m ^ 2 / 4
 lambda_l = Ql_rc_m3day / (Ql_rc_m3day + Qg_rc_m3day)
 Vsl_msec = const_conver_sec_day * Ql_rc_m3day / Ap_m2
 Vsg_msec = const_conver_sec_day * Qg_rc_m3day / Ap_m2
 'On Error Resume Next
 On Error GoTo lblCloseFile
 Call zhangmodel(arr_d_m, roughness_d, arr_theta_deg, Vsl_msec, Vsg_msec, rho_lrc_kgm3, rho_grc_kgm3, Mul_rc_cP, Mug_rc_cP, sigma_l_Nm, p_atma, _
                 Hl_out_fr, pgt_out, pgf_out, fpat_out_num, _
                 vf, hlf, sl, Ff, hls, cu, fqn, rsu, icon, cs, cf, vc, pge_out, pga_out, , ierr)
lblCloseFile:
 dPdL_out_atmm = -pgt_out
 dPdLg_out_atmm = -pge_out
 dPdLf_out_atmm = -pgf_out
 dPdLa_out_atmm = -pga_out
 
 Select Case fpat_out_num
    Case "liq": fpat_out_num = 200  '                 " liq" = liquid
    Case "gas": fpat_out_num = 201  '                 " gas" = gas
    Case "ann": fpat_out_num = 207  '                 "anul" = annular
    Case "d-b":  fpat_out_num = 206 '                 "dbub" = dispersed bubble
    Case "slug": fpat_out_num = 205 '                 "slug" = slug
    Case "bub": fpat_out_num = 202  '                 "bubl" = bubbly
    Case "int": fpat_out_num = 203
    Case "str": fpat_out_num = 204
    Case "n-a": fpat_out_num = 299
End Select '(fpat)
          
unf_UnifiedTUFFPGradient = Array(dPdLg_out_atmm * betta_grav + dPdLf_out_atmm * betta_fric, _
                            dPdLg_out_atmm * betta_grav, _
                            dPdLf_out_atmm * betta_fric, _
                            dPdLa_out_atmm, _
                            Vsl_msec, _
                            Vsg_msec, _
                            Hl_out_fr, _
                            fpat_out_num)
 
End Function
'^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^*
'     unified model for gas-liquid pipe flow via slug dynamics
'     written by,          hong-quan (holden) zhang          july 20, 2001
'     revised by,          hong-quan (holden) zhang          july 30, 2002
'     revised by,          hong-quan (holden) zhang          oct. 16, 2002
'     revised by,          hong-quan (holden) zhang          apr. 23, 2003
'          * *          tulsa university fluid flow projects (tuffp)     * *
'^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^*
'     this subroutine is for predictions of flow pattern, pressure gradient,
'     liquid holdup and slug characteristics in gas-liquid pipe flow at
'     different inclination angles from -90 to 90 deg.
'     the main subroutine handles the input and output. calculations are made
'     in gal (gas and liquid) and its subroutines.
'                                   references
'                                   ----------
'     1. h.-q. zhang, "unified model for gas-liquid pipe flow - model development,"
'       etce 2002, houston.
'     2. h.-q. zhang, "unified model for gas-liquid pipe flow - model validation,"
'       etce 2002, houston.
'^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^*
'                              subroutines called
'                              ------------------
'
'     gal          =     overall calculations
'     dislug     =     calculates the superficial liquid velocity on the
'                    boundary between dispersed bubble flow and slug flow
'                    with a given superficial gas velocity
'     stslug     =     calculates the superficial liquid velocity on the
'                    boundary between slug flow and stratified (or annular)
'                    flow with a given superficial gas velocity
'                    (for horizontal and downward flow)
'     anslug     =     calculates the superficial gas velocity on the
'                    boundary between slug flow and annular (or stratified)
'                    flow with a given superficial liquid velocity
'                    (for upward flow)
'     buslug     =     calculates the superficial gas velocity on the
'                    boundary between slug flow and bubbly flow
'                    with a given superficial liquid velocity
'                    (for near vertical upward flow, >60 deg, and large d)
'     single     =     calculates pressure gradient for single phase flow
'                    of liquid or gas
'     buflow     =     calculates pressure gradient and liquid holdup for bubbly
'                    flow (with bubble rise velocity vo)
'     dbflow     =     calculates pressure gradient and liquid holdup for dispersed
'                    bubble flow (without bubble rise velocity)
'     itflow     =     calculates pressure gradient, liquid holdup and slug
'                    characteristics for intermittent flow
'     saflow     =     calculates pressure gradient and liquid holdup for stratified
'                    or annular flow
'                              variable description
'                              --------------------
'     ac          =     cross sectional area of gas core (ft^2 m^2)
'     af          =     cross sectional area of film (ft^2 m^2)
'     *ang          =     angle of flow (pipe) from horizontal (deg.)
'     axp          =     cross sectional area of pipe (m2)
'     cf          =     film length in a slug unit (m)
'     cs          =     slug length (m)
'     cu          =     slug unit length (m)
'     *d          =     inside pipe diameter (in. or m)
'     *deng     =     gas density (lbm/ft3 or kg/m3)
'     *dengo     =     gas density at atmospheric conditions (lbm/ft3 or kg/m3)
'     *denl     =     liquid density (lbm/ft3 or kg/m3)
'     *ea          =     absolute pipe wall roughness (in. or m)
'     ed          =     relative pipe wall roughness (in. or m)
'     ens          =     no-slip liquid holdup
'     fe          =     entrainment fraction in gas core
'     fec          =     maximum entrainment fraction in gas core
'     fc          =     friction factor between gas core and pipe wall
'     ff          =     friction factor between film and pipe wall
'     fi          =     interfacial friction factor between gas and film
'     fpt(fpo)=     flow pattern (chr.),               ifpt
'                    "n-a"     =     not available           0
'                    "int"     =     intermittent           1
'                    "str"     =     stratified                2
'                    "ann"     =     annular                3
'                    "d-b"     =     dispersed bubble      4
'                    "bub"     =     bubbly                     5
'                    "liq"     =     liquid                     6
'                    "gas"     =     gas                     7
'     fqn           =     slug frequency (1/s)
'     fro          =     froude number
'     *g          =     gravitational acceleration (m/s2)
'     hl          =     liquid holdup
'     hlc          =     liquid holdup in gas core
'     hlf          =     liquid holdup in film
'     hls          =     liquid holdup in slug body
'     hlsc     =     maximum liquid holdup in slug body
'     icon     =     counter of iteration times
'     *iunit     =     unit indicator, 0 for si and 1 for british
'     *p          =     pressure (psia or pa)
'     pga          =     acceleration pressure gradient (psi/ft or pa/m)
'     pge          =     elevation pressure gradient (psi/ft or pa/m)
'     pgf          =     friction pressure gradient (psi/ft or pa/m)
'     pgt          =     total pressure gradient (psi/ft or pa/m)
'     const_Pi          =     ratio of the circumference of a circle to its diameter
'     re          =     reynolds number
'     rsu          =     ratio of slug length to slug unit length
'     sc          =     perimeter contacted by gas core (ft or m)
'     sf          =     perimeter wetted by film (ft or m)
'     si          =     perimeter of interface (ft or m)
'     sl          =     perimeter of of pipe wetted by liquid (ft or m)
'     *surl     =     liquid surface tension (lbf/ft or n/m)
'     *surw     =     water surface tension (lbf/ft or n/m)
'     thf          =     film thickness (ft or m)
'     vc          =     gas core velocity (ft/s or m/s)
'     vf          =     film velocity (ft/s or m/s)
'     *visg     =     gas viscosity (cp)
'     *visl     =     liquid viscosity (cp)
'     vm          =     mixture or slug velocity (ft/s or m/s)
'     *vsg          =     superficial gas velocity (ft/s or m/s)
'     *vsl          =     superficial liquid velocity (ft/s or m/s)
'     vt          =     slug traslational (tail and front) velocity (ft/s or m/s)
'     we          =     weber number
'^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^*
Private Sub zhangmodel(d, ed, ang, vsl, vsg, denl, deng, visl, visg, surl, p, _
 Hl, pgt, pgf, fpt, vf, hlf, sl, Ff, hls, cu, fqn, rsu, icon, cs, cf, vc, pgg, pga, _
 Optional ioerr, Optional ierr)
'Dim fpt As String * 3
'ierr = 0
'If (P < 0#) Then
'    'Open report.txt For Append As #1
'    addLogMsg "unified.zhangmodel:  illegal input value for p"
'    ierr = 1
'    ElseIf (d <= 0# Or d > 24#) Then
'    addLogMsg "unified.zhangmodel:  illegal input value for d"
'    ierr = 1
'    ElseIf (vsl < 0# Or vsl > 38) Then
'    addLogMsg "unified.zhangmodel:  illegal input value for vsl"
'    ierr = 1
'    ElseIf (vsg < 0# Or vsg > 250) Then
'    addLogMsg "unified.zhangmodel:  illegal input value for vsg = ", vsg
'    ierr = 1
'    ElseIf (denl <> 0# And denl <= deng) Then
'    addLogMsg "unified.zhangmodel:  illegal input value for denl or deng", denl, deng
'    ierr = 1
'End If
'If (ierr = 1) Then GoTo L900
'     -------------------------------------
'     convert input variables into si units
'     -------------------------------------
'd = d * 0.3048
p = p * 101325# '/ 14.7
'vsl = vsl * 0.3048
'vsg = vsg * 0.3048
'deng = deng * 16.0184
'denl = denl * 16.0184
visg = visg * 0.001
visl = visl * 0.001
'surl = surl * 0.001
' mixture velocity
Dim vm, e1, fec, hlsc, G, surw, dengo, axp, ens
vm = vsl + vsg
' tolerances for iterations
e1 = 0.0001
' limitation for liquid entraiment fraction in gas core
fec = 0.75
' limitation for liquid holdup in slug body
hlsc = 0.36
' constants
'const_Pi = 3.1415926
G = 9.81
' surface tension of water against air
surw = 0.0731
' density of air at atmospheric pressure
dengo = 1.2
' cross sectional area of the pipe
axp = const_Pi * d * d / 4#
'     ---------------------------
'     check for single phase flow
'     ---------------------------
ens = vsl / (vsl + vsg)
If (ens >= 0.99999) Then
    fpt = "liq"
    Hl = 1#
    sl = d * const_Pi
    Call singlee(d, ed, ang, p, denl, vsl, visl, Ff, pgt, pgf)
    GoTo L60
    ElseIf (ens <= 0.00001) Then
    fpt = "gas"
    Hl = 0#
    sl = 0#
    Call singlee(d, ed, ang, p, deng, vsg, visg, Ff, pgt, pgf)
    GoTo L60
End If
'     -------------------------------
'     check int - d-b transition boundary
'     -------------------------------
Dim vdb, vst
Call dislug(d, ed, ang, vsg, denl, deng, visl, surl, vdb)
If (vsl > vdb) Then
    fpt = "d-b"
    sl = d * const_Pi
    Call dbflow(d, ed, ang, vsl, vsg, denl, deng, visl, Hl, Ff, pgt, pgf, pgg, pga)
    GoTo L60
End If
If (ang > 0#) Then GoTo L50
'     -------------------------------
'     check i-sa transition boundary for downward flow (mostly i-s)
'     -------------------------------
Dim SF, thf
Call stslug(d, ed, ang, vsg, denl, deng, dengo, visl, visg, surl, vst)
If (vsl < vst) Then
    Call saflow(d, ed, ang, vsl, vsg, denl, deng, dengo, visl, visg, surl, _
                Hl, Ff, pgt, pgf, fpt, p, hlf, vf, SF, thf, icon, hls, vc, pgg, pga)
    sl = SF
    Else
    fpt = "int"
    sl = d * const_Pi
    Call itflow(d, ed, ang, vsl, vsg, denl, deng, dengo, visl, visg, surl, Hl, Ff, pgt, pgf, fpt, cu, hlf, vf, fqn, rsu, hls, icon, _
    vc, cs, cf, pgg, pga)
    If (fpt = "d-b") Then
        sl = d * const_Pi
        Call dbflow(d, ed, ang, vsl, vsg, denl, deng, visl, Hl, Ff, pgt, pgf, pgg, pga)
    End If
    If (fpt = "str" Or fpt = "ann") Then
        Call saflow(d, ed, ang, vsl, vsg, denl, deng, dengo, visl, visg, surl, _
        Hl, Ff, pgt, pgf, fpt, p, hlf, vf, SF, thf, icon, hls, vc, pgg, pga)
        sl = SF
    End If
End If
GoTo L60
'     -------------------------------
' check i-sa transition boundary for upward flow (mostly i-a)
'     -------------------------------
L50:
'continue
Dim van
Call anslug(d, ed, ang, vsl, denl, deng, dengo, visl, visg, surl, van)
If (vsg > van) Then
    fpt = "ann"
    sl = d * const_Pi
    Call saflow(d, ed, ang, vsl, vsg, denl, deng, dengo, visl, visg, _
       surl, Hl, Ff, pgt, pgf, fpt, p, hlf, vf, SF, thf, icon, hls, vc, pgg, pga)
    sl = SF
    GoTo L60
End If
'     -------------------------------
' check i-bu transition boundary
'     -------------------------------
Dim ckd
ckd = (denl * denl * G * d / ((denl - deng) * surl)) ^ 0.25
If (ckd <= 4.37) Then
    fpt = "int"
    sl = d * const_Pi
    Call itflow(d, ed, ang, vsl, vsg, denl, deng, dengo, visl, visg, _
      surl, Hl, Ff, pgt, pgf, fpt, cu, hlf, vf, fqn, rsu, hls, icon, vc, cs, cf, pgg, pga)
    If (fpt = "d-b") Then
        sl = d * const_Pi
        Call dbflow(d, ed, ang, vsl, vsg, denl, deng, visl, Hl, Ff, pgt, pgf, pgg, pga)
    End If
    If (fpt = "str" Or fpt = "ann") Then
        Call saflow(d, ed, ang, vsl, vsg, denl, deng, dengo, visl, visg, _
              surl, Hl, Ff, pgt, pgf, fpt, p, hlf, vf, SF, thf, icon, hls, vc, pgg, pga)
        sl = SF
    End If
    GoTo L60
End If
Dim vbu
Call buslug(d, vsl, vbu)
If (vsg < vbu And ang > 60#) Then
    fpt = "bub"
    sl = d * const_Pi
    Call buflow(d, ed, ang, vsl, vsg, denl, deng, visl, surl, Hl, Ff, pgt, pgf, pgg, pga)
    Else
    fpt = "int"
    sl = d * const_Pi
    Call itflow(d, ed, ang, vsl, vsg, denl, deng, dengo, visl, visg, _
         surl, Hl, Ff, pgt, pgf, fpt, cu, hlf, vf, fqn, rsu, hls, icon, vc, cs, cf, pgg, pga)
    If (fpt = "d-b") Then
        sl = d * const_Pi
        Call dbflow(d, ed, ang, vsl, vsg, denl, deng, visl, Hl, Ff, pgt, pgf, pgg, pga)
    End If
    If (fpt = "str" Or fpt = "ann") Then
        Call saflow(d, ed, ang, vsl, vsg, denl, deng, dengo, visl, visg, _
                surl, Hl, Ff, pgt, pgf, fpt, p, hlf, vf, SF, thf, icon, hls, vc, pgg, pga)
        sl = SF
    End If
End If
L60:
'continue
'     --------------------------------------
'     change variables back to british units
'     --------------------------------------
pgf = pgf / 101325# ' * (14.7 ) * 0.3048
pgg = pgg / 101325# ' * (14.7 ) * 0.3048
pga = pga / 101325# ' * (14.7 ) * 0.3048
pgt = pgt / 101325# ' * (14.7 ) * 0.3048
'd = d / 0.3048
p = p / 101325# '* 14.7
'vsl = vsl / 0.3048
'vsg = vsg / 0.3048
'deng = deng / 16.0184
'denl = denl / 16.0184
visg = visg * 1000#
visl = visl * 1000#
'surl = surl * 1000#
'      sll = sll / 0.3048
L900:
 End Sub
Private Sub stslug(d, ed, ang, vsg, denl, deng, dengo, visl, visg, surl, vst)
' tolerances for iterations
Dim e1, fec, hlsc, G, surw, axp, cs, cc, an1, fi, vdb, vm
e1 = 0.0001
' limitation for liquid entraiment fraction in gas core
fec = 0.75
' limitation for liquid holdup in slug body
hlsc = 0.36
' constants
'const_Pi = 3.1415926
G = 9.81
' surface tension of water against air
surw = 0.0731
' density of air at atmospheric pressure
dengo = 1.2
' cross sectional area of the pipe
axp = const_Pi * d * d / 4#
cs = (32# * cosd(ang) ^ 2 + 16# * sind(ang) ^ 2) * d
cc = 1.25 - 0.5 * Abs(sind(ang))
an1 = const_Pi * 0.5
fi = 0.0142
Call dislug(d, ed, ang, vsg, denl, deng, visl, surl, vdb)
' guess a vst
vst = 0.5
vm = vst + vsg
Dim hls, feo, hlfo, hlso, icon
hls = 1# / (1# + (vm / 8.66) ^ 1.39)
If (hls < hlsc) Then hls = hlsc
feo = 0#
hlfo = vst / vm
hlso = hls
icon = 0
L5:
If (vst > vdb) Then GoTo L90
' entrainment fraction according to oliemans et al."s (1986) correlation
Dim resg, web, fro, resl, ccc, fe, vt, hlf, hlc, af, ac
resg = Abs(deng * vsg * d / visg)
web = Abs(deng * vsg * vsg * d / surl)
fro = Abs(Sqr(G * d) / vsg)
resl = Abs(denl * vst * d / visl)
ccc = 0.003 * web ^ 1.8 * fro ^ 0.92 * resl ^ 0.7 * (denl / deng) ^ 0.38 * (visl / visg) ^ 0.97 / resg ^ 1.24
fe = ccc / (1# + ccc)
If (fe > fec) Then fe = fec
fe = (fe + 9# * feo) / 10#
feo = fe
' translational velocity according to nicklin (1962), bendiksen (1984)
' and zhang et al. (2000)
vt = 1.3 * vm + (0.54 * cosd(ang) + 0.35 * sind(ang)) * Sqr(G * d * (denl - deng) / denl)
hlf = ((hls * (vt - vm) + vst) * (vsg + vst * fe) - vt * vst * fe) / (vt * vsg)
If (hlf <= 0#) Then hlf = Abs(hlf)
If (hlf >= 1#) Then hlf = 1# / hlf
hlf = (hlf + 9# * hlfo) / 10#
hlfo = hlf
hlc = (1# - hlf) * vst * fe / (vm - vst * (1# - fe))
If (hlc < 0#) Then hlc = 0#
af = hlf * axp
ac = (1# - hlf) * axp
' wetted angle
' calculate wetted angle using newton"s method
Dim an2, tha, an, th0, th
If (af < axp) Then
L10:
    an2 = an1 - 0.5 * (8# * af / d / d + Sin(an1) - an1) / (Cos(an1) - 1#)
    If (an2 > 2# * const_Pi Or an2 < 0#) Then an2 = 1.5 * const_Pi
    tha = Abs((an2 - an1) / an1)
    If (tha > e1) Then
        an1 = an2
        GoTo L10
        Else
        an = an2
    End If
    Else
    an = 2# * const_Pi
    af = axp
End If
' wetted wall fraction according to grolman et al., aiche (1996)
If (Abs(ang) < 85#) Then
    th0 = an / (2# * const_Pi)
    th = th0 * (surw / surl) ^ 0.15 + deng * (denl * vst * vst * d / surl) ^ 0.25 _
    * (vsg * vsg / ((1# - hlf) ^ 2 * G * d)) ^ 0.8 / ((denl - deng) * cosd(ang))
    If (th > 1#) Then th = 1#
    Else
    th = 1#
End If
' wetted perimeters
Dim SF, sc, ab, si, df, thf, dc, vf, vc, denc, ref, rec, Ff, fc
SF = const_Pi * d * th
sc = const_Pi * d * (1# - th)
ab = d * d * (const_Pi * th - Sin(2# * th * const_Pi) / 2#) / 4#
si = (SF * (ab - af) + d * Sin(const_Pi * th) * af) / ab
' the hydraulic diameters
df = 4# * af / SF
thf = 2# * af / (SF + si)
dc = 4# * ac / (sc + si)
vf = vst * (1# - fe) / hlf
vc = (vm - vst * (1# - fe)) / (1# - hlf)
' reynolds numbers
denc = (denl * hlc + deng * (1# - hlf - hlc)) / (1# - hlf)
ref = Abs(denl * vf * df / visl)
rec = Abs(deng * vc * dc / visg)
' friction factors
Ff = 0.046 / (ref) ^ 0.2
fc = 0.046 / (rec) ^ 0.2
'      ff=1.0/(3.6*log10(6.9/ref+(ed/3.7)^1.11))^2
'      fc=1.0/(3.6*log10(6.9/rec+(ed/3.7)^1.11))^2
' interfacial friction factor
' stratified flow interfacial friction factor
' interfacial friction factor according to andritsos et al. (1987)
' modified by zhang (2001)
Dim vsgt, abcd, vfn, abu, dpex, remx, fm, dpsl, ad
vsgt = 5# * Sqr(dengo / deng)
fi = fc * (1# + 15# * (2# * thf / d) ^ 0.5 * (vsg / vsgt - 1#))
If (fi < fc) Then fi = fc
abcd = (sc * fc * deng * vc * Abs(vc) / (2# * ac) + si * fi * deng * (vc - vf) * Abs(vc - vf) * (1# / af + 1# / ac) / 2# _
     - (denl - denc) * G * sind(ang)) * af * 2# / (SF * Ff * denl)
If (abcd < 0#) Then
    vfn = vf * 0.9
    GoTo L20
    Else
End If
vfn = Sqr(abcd)
L20:
abu = Abs((vfn - vf) / vf)
If (abu > e1) Then
    vf = (vfn + 9# * vf) / 10#
    vst = vf * hlf / (1# - fe)
    vm = vst + vsg
    dpex = (denl * (vm - vf) * (vt - vf) * hlf + denc * (vm - vc) * (vt - vc) * (1# - hlf)) * d / cs / 4#
    '          denm=denl*hls+deng*(1.0-hls)
    remx = Abs(d * vm * denl / visl)
    fm = 1# / (3.6 * log10(6.9 / remx + (ed / 3.7) ^ 1.11)) ^ 2
    dpsl = fm * denl * vm * vm / 2#
    ad = (dpsl + dpex) / (3.16 * cc * Sqr(surl * (denl - deng) * G))
    hls = 1# / (1# + ad)
    If (hls < hlsc) Then hls = hlsc
    hls = (hls + 9# * hlso) / 10#
    hlso = hls
    icon = icon + 1
    GoTo L5
    Else
End If
vst = vfn * hlf / (1# - fe)
L90:
If (vst > vdb) Then vst = vdb
Exit Sub
Exit Sub
End Sub
Private Sub anslug(d, ed, ang, vsl, denl, deng, dengo, visl, visg, surl, van)
Dim e1, fec, hlsc, G, surw, axp, cs, cc, an1, fi, vdb, vm, hls, hlso, feo, hlfo, web, fro
Dim resl, resg, ccc, fe, vt, hlf, hlc, af, ac, an2, tha, an, th0, th
Dim SF, sc, ab, si, df, thf, dc, vf, vc, denc, ref, rec, fr2, fr3, Ff, fc, vsgt
Dim abcd, vcn, abu, dpex, remx, fm, dpsl, ad
' tolerances for iterations
e1 = 0.0001
' limitation for liquid entraiment fraction in gas core
fec = 0.75
' limitation for liquid holdup in slug body
hlsc = 0.36
' constants
'const_Pi = 3.1415926
G = 9.81
' surface tension of water against air
surw = 0.0731
' density of air at atmospheric pressure
dengo = 1.2
' cross sectional area of the pipe
axp = const_Pi * d * d / 4#
cs = (32# * cosd(ang) ^ 2 + 16# * sind(ang) ^ 2) * d
cc = 1.25 - 0.5 * Abs(sind(ang))
an1 = const_Pi * 0.5
fi = 0.0142
' guess a van
van = 10#
vm = vsl + van
hls = 1# / (1# + (vm / 8.66) ^ 1.39)
If (hls < hlsc) Then hls = hlsc
hlso = hls
feo = 0#
hlfo = vsl / vm
' entrainment fraction according to oliemans et al"s (1986) correlation
L105:
web = deng * van * van * d / surl
fro = Sqr(G * d) / van
resl = denl * vsl * d / visl
resg = deng * van * d / visg
ccc = 0.003 * web ^ 1.8 * fro ^ 0.92 * resl ^ 0.7 * (denl / deng) ^ 0.38 * (visl / visg) ^ 0.97 / resg ^ 1.24
fe = ccc / (1# + ccc)
If (fe > fec) Then fe = fec
fe = (fe + 9# * feo) / 10#
feo = fe
' translational velocity according to nicklin (1962), bendiksen (1984)
' and zhang et al. (2000)
vt = 1.3 * vm + (0.54 * cosd(ang) + 0.35 * sind(ang)) * Sqr(G * d * (denl - deng) / denl)
hlf = ((hls * (vt - vm) + vsl) * (van + vsl * fe) - vt * vsl * fe) / (vt * van)
If (hlf <= 0#) Then hlf = Abs(hlf)
If (hlf >= 1#) Then hlf = 1# / hlf
hlf = (hlf + 9# * hlfo) / 10#
hlfo = hlf
hlc = (1# - hlf) * vsl * fe / (vm - vsl * (1# - fe))
If (hlc < 0#) Then hlc = 0#
af = hlf * axp
ac = (1# - hlf) * axp
' wetted angle
L110:
an2 = an1 - 0.5 * (8# * af / d / d + Sin(an1) - an1) / (Cos(an1) - 1#)
If (an2 > 2# * const_Pi) Then an2 = 1.75 * const_Pi
If (an2 < 0#) Then an2 = 0.25 * const_Pi
tha = Abs((an2 - an1) / an1)
If (tha > e1) Then
    an1 = an2
    GoTo L110
    Else
    an = an2
End If
' wetted wall fraction according to grolman and fortuin (1996)
If (Abs(ang) < 85#) Then
    th0 = an / (2# * const_Pi)
    th = th0 * (surw / surl) ^ 0.15 + deng * (denl * vsl * vsl * d / surl) ^ 0.25 _
         * (van * van / ((1# - hlf) ^ 2 * G * d)) ^ 0.8 / ((denl - deng) * cosd(ang))
    If (th > 1#) Then th = 1#
    Else
    th = 1#
End If
' wetted perimeters
SF = const_Pi * d * th
sc = const_Pi * d * (1# - th)
ab = d * d * (const_Pi * th - Sin(2# * th * const_Pi) / 2#) / 4#
si = (SF * (ab - af) + d * Sin(const_Pi * th) * af) / ab
' the hydraulic diameters
df = 4# * af / SF
thf = 2# * af / (SF + si)
dc = 4# * ac / (sc + si)
vf = vsl * (1# - fe) / hlf
vc = (vm - vsl * (1# - fe)) / (1# - hlf)
' reynolds numbers
denc = (denl * hlc + deng * (1# - hlf - hlc)) / (1# - hlf)
ref = Abs(denl * vf * df / visl)
rec = Abs(deng * vc * dc / visg)
' frictional factors
fr2 = 16# / 2000#
fr3 = 1# / (3.6 * log10(6.9 / 3000# + (ed / 3.7) ^ 1.11)) ^ 2
'      fr3=0.046/(3000.0)^0.2
If (ref < 2000#) Then Ff = 16# / ref
If (ref > 3000#) Then Ff = 1# / (3.6 * log10(6.9 / ref + (ed / 3.7) ^ 1.11)) ^ 2
'      if(ref > 3000.0) ff=0.046/(ref)^0.2
If (ref >= 2000# And ref <= 3000#) Then Ff = fr2 + (fr3 - fr2) * (ref - 2000#) / 1000#
'      ff=1.0/(3.6*log10(6.9/ref+(ed/3.7)^1.11))^2
fc = 1# / (3.6 * log10(6.9 / rec + (ed / 3.7) ^ 1.11)) ^ 2
'      ff=0.046/(ref)^0.2
'      fc=0.046/(rec)^0.2
' interfacial friction factor according to andritsos et al. (1987)
' modified by zhang (2001)
vsgt = 5# * Sqr(dengo / deng)
fi = fc * (1# + 15# * (2# * thf / d) ^ 0.5 * (van / vsgt - 1#))
If (fi < fc) Then fi = fc
abcd = (SF * Ff * denl * vf * Abs(vf) / (2# * af) - sc * fc * deng * vc * vc / (2# * ac) _
     + (denl - denc) * G * sind(ang)) * 2# / (si * fi * deng * (1# / af + 1# / ac))
If (abcd < 0#) Then
    vcn = vc * 0.9
    GoTo L120
    Else
End If
vcn = Sqr(abcd) + vf
L120:
abu = Abs((vcn - vc) / vc)
If (abu > e1) Then
    vc = (vcn + 9# * vc) / 10#
    van = vc * (1# - hlf) - vsl * fe
    vm = vsl + van
    dpex = (denl * (vm - vf) * (vt - vf) * hlf + denc * (vm - vc) * (vt - vc) * (1# - hlf)) * d / cs / 4#
    '          denm=denl*hls+deng*(1.0-hls)
    remx = Abs(d * vm * denl / visl)
    fm = 1# / (3.6 * log10(6.9 / remx + (ed / 3.7) ^ 1.11)) ^ 2
    dpsl = fm * denl * vm * vm / 2#
    ad = (dpsl + dpex) / (3.16 * cc * Sqr(surl * (denl - deng) * G))
    hls = 1# / (1# + ad)
    If (hls < hlsc) Then hls = hlsc
    hls = (hls + 9# * hlso) / 10#
    hlso = hls
    GoTo L105
    Else
End If
van = vcn * (1# - hlf) - vsl * fe
Exit Sub
Exit Sub
End Sub
' boundary between slug and dispersed bubble flows
Private Sub dislug(d, ed, ang, vsg, denl, deng, visl, surl, vdb)
Dim e1, fec, hlsc, G, surw, axp, cs, cc, an1, fi, vm, hls, hlso, feo, hlfo, web, fro
Dim resl, resg, ccc, fe, vt, hlf, hlc, af, ac, an2, tha, an, th0, th
Dim SF, sc, ab, si, df, thf, dc, vf, vc, denc, ref, rec, fr2, fr3, Ff, fc, vsgt
Dim abcd, vcn, abu, dpex, remx, fm, dpsl, ad, dengo, vdb1, hlb, denm, rem1, vmn, abm, vdb2
' tolerances for iterations
e1 = 0.0001
' limitation for liquid entraiment fraction in gas core
fec = 0.75
' limitation for liquid holdup in slug body
hlsc = 0.36
' constants
'const_Pi = 3.1415926
G = 9.81
' surface tension of water against air
surw = 0.0731
' density of air at atmospheric pressure
dengo = 1.2
' cross sectional area of the pipe
axp = const_Pi * d * d / 4#
cc = 1.25 - 0.5 * Abs(sind(ang))
' guess a vdb
vdb1 = 2#
L10:
vm = vdb1 + vsg
hlb = vdb1 / vm
denm = (1# - hlb) * deng + hlb * denl
rem1 = Abs(denm * d * vm / visl)
fm = 1# / (3.6 * log10(6.9 / rem1 + (ed / 3.7) ^ 1.11)) ^ 2
'Open report.txt For Append As #1
'      addLogMsg "ppp2",hlb,vdb1,vm,denm,rem1,fm,d,visl
'      fm=0.046/abs(rem1)^0.2
'      dc=2.0* sqr (0.4*surl/((denl-deng)*g))
'      en=fm*denm*vm^2*hlb
vmn = Sqr(((1# / hlb - 1#) * 6.32 * cc * Sqr((denl - deng) * G * surl)) / (fm * denm))
abm = Abs((vmn - vm) / vm)
If (abm > e1) Then
    vm = (vmn + 19# * vm) / 20#
    vdb1 = vm - vsg
    GoTo L10
    Else
End If
vdb1 = vmn - vsg
vdb2 = 2#
Dim ve, dv, En, vn, vd
ve = vdb2
L30:
hlb = ve / (vsg + ve)
vm = vsg + ve
denm = (1# - hlb) * deng + hlb * denl
rem1 = Abs(denm * d * vm / visl)
fm = 1# / (3.6 * log10(6.9 / rem1 + (ed / 3.7) ^ 1.11)) ^ 2
'      fm=0.046/abs(rem1)^0.2
dc = 2# * Sqr(0.4 * surl / ((denl - deng) * G))
dv = (denl / surl) ^ 0.6 * (2# * fm / d) ^ 0.4
En = 4.15 * Sqr(1# - hlb) + 0.725
vn = (En / (dc * dv)) ^ 0.83 - vsg
vd = Abs((vn - ve) / ve)
If (vd > e1) Then
    ve = (vn + 9# * ve) / 10#
    GoTo L30
    Else
End If
L40:
vdb2 = vn
If (vdb2 > vdb1) Then
    vdb = vdb2
    Else
    vdb = vdb1
End If
End Sub
Private Sub buslug(d, vsl, vbu)
' constants
'const_Pi = 3.1415926
Dim G, axp, vo, hgc
G = 9.81
' cross sectional area of the pipe
axp = const_Pi * d * d / 4#
vo = 0.35 * Sqr(G * d)
hgc = 0.25
vbu = vsl * hgc / (1# - hgc) + vo * hgc
Exit Sub
End Sub
'     single phase flow calculation
Private Sub singlee(d, ed, ang, p, den, v, vis, Ff, pgt, pgf)
Dim e1, fec, hlsc, G, surw, dengo, axp, pge, Re, fr2, fr3, ekk, icrit, pga
' tolerances for iterations
e1 = 0.0001
' limitation for liquid entraiment fraction in gas core
fec = 0.75
' limitation for liquid holdup in slug body
hlsc = 0.36
' constants
'const_Pi = 3.1415926
G = 9.81
' surface tension of water against air
surw = 0.0731
' density of air at atmospheric pressure
dengo = 1.2
' cross sectional area of the pipe
axp = const_Pi * d * d / 4#
'     --------------------------------------
'     calculate elevation pressure gradient.
'     --------------------------------------
pge = -den * sind(ang) * G
'     ---------------------------------------
'     calculate frictional pressure gradient.
'     ---------------------------------------
Re = Abs(d * den * v / vis)
fr2 = 16# / 2000#
fr3 = 1# / (3.6 * log10(6.9 / 3000# + (ed / 3.7) ^ 1.11)) ^ 2
'      fr3=0.046/(3000.0)^0.2
If (Re < 2000#) Then Ff = 16# / Re
If (Re > 3000#) Then Ff = 1# / (3.6 * log10(6.9 / Re + (ed / 3.7) ^ 1.11)) ^ 2
'      if(re > 3000.0) ff=0.046/(re)^0.2
If (Re >= 2000# And Re <= 3000#) Then Ff = fr2 + (fr3 - fr2) * (Re - 2000#) / 1000#
pgf = -2# * Ff * den * v * v / d
'     -------------------------------------------
'     calculate accelerational pressure gradient.
'     -------------------------------------------
ekk = den * v * v / p
icrit = 0
If (ekk > 0.95) Then icrit = 1
If (icrit = 1) Then ekk = 0.95
pgt = (pge + pgf) / (1# - ekk)
pga = pgt * ekk
pgt = (pge + pgf + pga)
If (den > 400#) Then
    pgt = (pge + pgf)
    pga = 0#
    Else
End If
L999:
Exit Sub
End Sub
Private Sub dbflow(d, ed, ang, vsl, vsg, denl, deng, visl, Hl, fm, pgt, pgf, pge, pga)
Dim e1, fec, hlsc, G, surw, dengo, axp, Re, fr2, fr3, ekk, icrit, vm, denm, dens, rem1
' tolerances for iterations
e1 = 0.0001
' limitation for liquid entraiment fraction in gas core
fec = 0.75
' limitation for liquid holdup in slug body
hlsc = 0.36
' constants
'const_Pi = 3.1415926
G = 9.81
' surface tension of water against air
surw = 0.0731
' density of air at atmospheric pressure
dengo = 1.2
' cross sectional area of the pipe
axp = const_Pi * d * d / 4#
vm = vsg + vsl
'     ^^^^^^^^^^^*
'     calculate liquid holdup
'     ^^^^^^^^^^^*
Hl = vsl / (vsg + vsl)
'     ----------------------------
'     calculate pressure gradients
'     ----------------------------
denm = (1# - Hl) * deng + Hl * denl
dens = denm + Hl * (denl - denm) / 3#
rem1 = Abs(dens * d * vm / visl)
fm = 1# / (3.6 * log10(6.9 / rem1 + (ed / 3.7) ^ 1.11)) ^ 2
'      fm=0.046/(rem1)^0.2
pgf = -2# * fm * dens * vm ^ 2 / d
pge = -G * denm * sind(ang)
pga = 0#
pgt = (pgf + pge + pga)
L999:
Exit Sub
End Sub
Private Sub buflow(d, ed, ang, vsl, vsg, denl, deng, visl, surl, Hl, fm, pgt, pgf, pge, pga)
Dim e1, fec, hlsc, G, surw, dengo, axp, Re, fr2, fr3, ekk, icrit, vm, vo, denm, dens, rem1
' tolerances for iterations
e1 = 0.0001
' limitation for liquid entraiment fraction in gas core
fec = 0.75
' limitation for liquid holdup in slug body
hlsc = 0.36
' constants
'const_Pi = 3.1415926
G = 9.81
' surface tension of water against air
surw = 0.0731
' density of air at atmospheric pressure
dengo = 1.2
' cross sectional area of the pipe
axp = const_Pi * d * d / 4#
vm = vsg + vsl
vo = 1.53 * (G * (denl - deng) * surl / denl / denl) ^ 0.25 * sind(ang)
'     ^^^^^^^^^^^*
'     calculate liquid holdup
'     ^^^^^^^^^^^*
If (Abs(ang) < 10#) Then
    Hl = vsl / (vsg + vsl)
    Else
    Hl = (Sqr((vm - vo) ^ 2 + 4# * vsl * vo) - vsg - vsl + vo) / (2# * vo)
End If
'     ----------------------------
'     calculate pressure gradients
'     ----------------------------
denm = (1# - Hl) * deng + Hl * denl
dens = denm + Hl * (denl - denm) / 3#
rem1 = Abs(dens * d * vm / visl)
fr2 = 16# / 2000#
fr3 = 1# / (3.6 * log10(6.9 / 3000# + (ed / 3.7) ^ 1.11)) ^ 2
'      fr3=0.046/(3000.0)^0.2
If (rem1 < 2000#) Then fm = 16# / rem1
If (rem1 > 3000#) Then fm = 1# / (3.6 * log10(6.9 / rem1 + (ed / 3.7) ^ 1.11)) ^ 2
'      if(rem1 > 3000.0) fm=0.046/(rem1)^0.2
If (rem1 >= 2000# And rem1 <= 3000#) Then fm = fr2 + (fr3 - fr2) * (rem1 - 2000#) / 1000#
pgf = -2# * fm * dens * vm ^ 2 / d
pge = -G * denm * sind(ang)
pga = 0#
pgt = (pgf + pge + pga)
L999:
Exit Sub
End Sub
' intermittent flow calculation
Private Sub itflow(d, ed, ang, vsl, vsg, denl, deng, dengo, visl, visg, _
 surl, Hl, Ff, pgt, pgf, fpt, cu, hlf, vf, fqn, rsu, hls, icon, _
 vc, cs, cf, pgg, pga)
Dim vm, eq, hlsc, G, surw, axp, hlso, vt, cc, an1, e1
icon = 0
vm = vsl + vsg
' tolerances for iterations
e1 = 0.0001
' limitation for liquid holdup in slug body
hlsc = 0.36
' constants
'const_Pi = 3.1415926
G = 9.81
' surface tension of water against air
surw = 0.0731
' density of air at atmospheric pressure
dengo = 1.2
' cross sectional area of the pipe
axp = const_Pi * d * d / 4#
hls = 1# / (1# + (vm / 8.66) ^ 1.39)
If (hls < hlsc) Then hls = hlsc
hlso = hls
' translational velocity according to nicklin (1962), bendiksen (1984)
' and zhang et al. (2000)
vt = 1.3 * vm + (0.54 * cosd(ang) + 0.35 * sind(ang)) * Sqr(G * d * (denl - deng) / denl)
' slug length
cs = (32# * cosd(ang) ^ 2 + 16# * sind(ang) ^ 2) * d
cc = 1.25 - 0.5 * Abs(sind(ang))
' guess cu and cf
cu = cs * vm / vsl
cf = cu - cs
hlf = vsl / vm
' frictional factors based on superfacial velocities and pipe diameter
' assuming the flow state is turbulent
an1 = const_Pi * 0.7
L5:
cu = cf + cs
Dim vfn, hlfn, af, ac, dpex, rem1, fm, dpsl, ad
vfn = (cu * vsl - cs * hls * vm) * vt / (cf * vt * hls + cu * (vsl - hls * vm))
vf = (vfn + 9# * vf) / 10#
'      vf=vfn
hlfn = (cf * vt * hls + cu * (vsl - hls * vm)) / (cf * vt)
If (hlfn <= 0#) Then
  hlfn = vsl / vm 'Abs(hlfn)
End If
If (hlfn >= 1#) Then
  hlfn = vsl / vm '1# - 1# / hlfn
End If
hlf = (hlfn + 4# * hlf) / 5#
'      hlf=hlfn
vc = (vm - hlf * vf) / (1# - hlf)
af = hlf * axp
ac = (1# - hlf) * axp
' slug liquid holdup
dpex = (denl * (vm - vf) * (vt - vf) * hlf + deng * (vm - vc) * (vt - vc) * (1# - hlf)) * d / cs / 4#
'       denm=denl*hls+deng*(1.0-hls)
rem1 = Abs(denl * vm * d / visl)
fm = 1# / (3.6 * log10(6.9 / rem1 + (ed / 3.7) ^ 1.11)) ^ 2
dpsl = fm * denl * vm * vm / 2#
ad = (dpsl + dpex) / (3.16 * cc * Sqr(surl * (denl - deng) * G))
hls = 1# / (1# + ad)
If (hls < hlsc) Then hls = hlsc
hls = (hls + 9# * hlso) / 10#
hlso = hls
' wetted angle assuming flat film surface
' calculated using newton"s method
Dim an2, tha, an, vsgf, vslf, th0, th
If (af < axp) Then
L10:
    an2 = an1 - 0.5 * (8# * af / d / d + Sin(an1) - an1) / (Cos(an1) - 1#)
    If (an2 > 2# * const_Pi) Then an2 = 1.75 * const_Pi
    If (an2 < 0#) Then an2 = 0.25 * const_Pi
    tha = Abs((an2 - an1) / an1)
    If (tha > e1) Then
        an1 = an2
        GoTo L10
        Else
        an = an2
    End If
    Else
    an = 2# * const_Pi
    af = axp
End If
' wetted wall fraction according to grolman et al., aiche (1996)
vsgf = vc * (1# - hlf)
vslf = vf * hlf
If (Abs(ang) < 85#) Then
    th0 = an / (2# * const_Pi)
    th = th0 * (surw / surl) ^ 0.15 + deng * (denl * vslf * vslf * d / surl) ^ 0.25 _
         * (vsgf * vsgf / ((1# - hlf) ^ 2 * G * d)) ^ 0.8 / ((denl - deng) * cosd(ang))
    If (th > 1#) Then th = 1#
    Else
    th = 1#
End If
' wetted perimeters
Dim SF, sc, ab, si, df, thf, dc, denc, ref, rec, fr2, fr3, fc, vsgt
Dim abcd, vcn, abu, remx, vdb1, hlb, denm, vmn, abm, vdb2
SF = const_Pi * d * th
sc = const_Pi * d * (1# - th)
ab = d * d * (const_Pi * th - Sin(2# * th * const_Pi) / 2#) / 4#
si = (SF * (ab - af) + d * Sin(const_Pi * th) * af) / ab
' the hydraulic diameters
df = 4# * af / SF
thf = 2# * af / (SF + si)
dc = 4# * ac / (sc + si)
' reynolds numbers
ref = Abs(denl * vf * df / visl)
rec = Abs(deng * vc * dc / visg)
' frictional factors
fr2 = 16# / 2000#
fr3 = 1# / (3.6 * log10(6.9 / 3000# + (ed / 3.7) ^ 1.11)) ^ 2
'      fr3=0.046/(3000.0)^0.2
If (ref < 2000#) Then Ff = 16# / ref
If (ref > 3000#) Then Ff = 1# / (3.6 * log10(6.9 / ref + (ed / 3.7) ^ 1.11)) ^ 2
'      if(ref > 3000.0) ff=0.046/(ref)^0.2
If (ref >= 2000# And ref <= 3000#) Then Ff = fr2 + (fr3 - fr2) * (ref - 2000#) / 1000#
If (rec < 2000#) Then fc = 16# / rec
If (rec > 3000#) Then fc = 1# / (-3.6 * log10(6.9 / rec + (ed / 3.7) ^ 1.11)) ^ 2
'      if(rec > 3000.0) fc=0.046/(rec)^0.2
If (rec >= 2000# And rec <= 3000#) Then fc = fr2 + (fr3 - fr2) * (rec - 2000#) / 1000#
' interfacial friction factor according to andritsos et al. (1987)
' modified by zhang (2001)
vsgt = 5# * Sqr(dengo / deng)
Dim fi, fsl
fi = fc * (1# + 15# * (2# * thf / d) ^ 0.5 * (vsgf / vsgt - 1#))
'      fi=fc*(1.0+14.3*abs(hlf)^0.5*(vsgf/vsgt-1.0))
' interfacial friction factor (annular) according to ambrosini et al. (1991)
'       reg=abs(vc*deng*d/visg)
'       wed=deng*vc*vc*d/surl
'       fs=0.046/reg^0.2
'      shi=fi*deng*(vc-vf)^2/2.0
'      thfo=thf* sqr (shi*deng)/visg
'      fra=fs*(1.0+13.8*(thfo-200.0* sqr (deng/denl))*wed^0.2/reg^0.6)
'      fi=(frs+fra)/2.0
If (fi < fc) Then fi = fc
If (fi > 1#) Then fi = 1#
'      if(fi < 0.0142) fi=0.0142
' calculate film length cf using the combined momentum eqaution
fsl = denl * (vm - vf) * (vt - vf) - deng * (vm - vc) * (vt - vc)
abcd = SF * Ff * denl * vf * Abs(vf) / 2# / af _
     - sc * fc * deng * vc * Abs(vc) / 2# / ac _
     - si * fi * deng * (vc - vf) * Abs(vc - vf) / 2# * (1# / af + 1# / ac) _
     + (denl - deng) * G * sind(ang)
Dim abef, cfn, cfm, cfo, dens
abef = 3# * SF * visl * vf / thf / af _
     - SF * fi * deng * (vc - vf) * Abs(vc - vf) / 4# / af _
     - sc * fc * deng * vc * Abs(vc) / 2# / ac _
     - si * fi * deng * (vc - vf) * Abs(vc - vf) / 2# * (1# / af + 1# / ac) _
     + (denl - deng) * G * sind(ang)
cfn = fsl / abcd
cfm = fsl / abef
icon = icon + 1
If (ref > 3000#) Then cfo = cfn
If (ref < 2000#) Then cfo = cfm
If (ref <= 3000# And ref >= 2000#) Then cfo = (cfn * (ref - 2000#) + cfm * (3000# - ref)) / 1000#
If (cfo < 0#) Then
  cfo = 0.5 * cs * (vm / vsl - 1) '-cfo
End If
abu = Abs((cfo - cf) / cf)
If (abu < e1 Or icon > 100) Then GoTo L100
cf = (cfo + 9# * cf) / 10#
GoTo L5
L100:
cf = cfo
' slug unit length
cu = cf + cs
'      vf=(cu*vsl-cs*hls*vm)*vt
'     & /(cf*vt*hls+cu*(vsl-hls*vm))
'      hlf=(cf*vt*hls+cu*(vsl-hls*vm))/(cf*vt)
'      vc=(vm-hlf*vf)/(1.0-hlf)
denm = denl * hls + deng * (1# - hls)
dens = denm + hls * (denl - denm) / 3#
Dim res, fs, fos, dps, fof, dpf
res = Abs(dens * vm * d / visl)
fr2 = 16# / 2000#
fr3 = 1# / (3.6 * log10(6.9 / 3000# + (ed / 3.7) ^ 1.11)) ^ 2
'      fr3=0.046/(3000.0)^0.2
If (res < 2000#) Then fs = 16# / res
If (res > 3000#) Then fs = 1# / (3.6 * log10(6.9 / res + (ed / 3.7) ^ 1.11)) ^ 2
'      if(res > 3000.0) fs=0.046/(res)^0.2
If (res >= 2000# And res <= 3000#) Then fs = fr2 + (fr3 - fr2) * (res - 2000#) / 1000#
' slug frequency
fqn = vt / cu
' slug to slug unit length ratio
rsu = cs / cu
' pressure gradient in slug
fos = (denl * (vm - vf) * (vt - vf) * hlf + deng * (vm - vc) * (vt - vc) * (1# - hlf)) / cs
dps = -fs * dens * vm * vm * 2# / d - denm * G * sind(ang) - fos
' pressure gradient in film
fof = fos * cs / cf
dpf = fof - SF * Ff * denl * vf * Abs(vf) / (2# * axp) _
 - sc * fc * deng * vc * Abs(vc) / (2# * axp) _
 - (denl * hlf + deng * (1# - hlf)) * G * sind(ang)
' total pressure gradient
pgt = (dps * cs + dpf * cf) / cu
' total pressure gradient due to friction
pgf = -((fs * dens * vm * vm * 2# / d) * cs _
 + (SF * Ff * denl * vf * Abs(vf) / (2# * axp) _
 + sc * fc * deng * vc * Abs(vc) / (2# * axp)) * cf) / cu
pgg = pgt - pgf
pga = 0
' overall liquid holdup
Hl = (cf * hlf + hls * cs) / cu
If (Abs(cf) < d) Then ' ???????? ??????? ????? ????, ??? ???????????? ???????? ?? ?????? ??????? ??? 45 ???????? ???????
 If (res < 2000) Then
    fpt = "bub"
 Else
    fpt = "d-b"
 End If
End If
'If (Abs(cf) < d) Then fpt = "d-b"
If (Abs(cf) > 199# * cs Or hlf > hls) Then
    fpt = "ann"
    If (vf < 0#) Then vf = vsl / hlf
End If
L280:
Exit Sub
End Sub
' stratified and/or annular flow calculation
Private Sub saflow(d, ed, ang, vsl, vsg, denl, deng, dengo, visl, visg, _
 surl, Hl, Ff, pgt, pgf, fpt, p, hlf, vf, SF, thf, icon, hlc, vc, pgg, pga)
 
Dim e1, fec, hlsc, G, surw, axp, cs, cc, an1, fi, vdb, vm, hls, hlso, feo, hlfo, web, fro
Dim resl, resg, ccc, fe, vt, af, ac, an2, tha, an, th0, th
Dim sc, ab, si, df, dc, denc, ref, rec, fr2, fr3, fc, vsgt
Dim abcd, vcn, abu, dpex, remx, fm, dpsl, ad
'Dim fpt As String * 3
icon = 0
' tolerances for iterations
e1 = 0.0001
' limitation for liquid entraiment fraction in gas core
fec = 0.75
' limitation for liquid holdup in slug body
hlsc = 0.36
' constants
'const_Pi = 3.1415926
G = 9.81
' surface tension of water against air
surw = 0.0731
' density of air at atmospheric pressure
dengo = 1.2
' cross sectional area of the pipe
axp = const_Pi * d * d / 4#
fi = 0.0142
' entrainment fraction according to oliemans et al"s (1986) correlation
resg = Abs(deng * vsg * d / visg)
web = Abs(deng * vsg * vsg * d / surl)
fro = Abs(Sqr(G * d) / vsg)
resl = Abs(denl * vsl * d / visl)
ccc = 0.003 * web ^ 1.8 * fro ^ 0.92 * resl ^ 0.7 _
 * (denl / deng) ^ 0.38 * (visl / visg) ^ 0.97 / resg ^ 1.24
fe = ccc / (1# + ccc)
If (fe > 1#) Then fe = 1#
' guess a film velocity
vf = vsl
hlf = vsl / (vsl + vsg)
an1 = 0.7 * const_Pi
L5:
Dim hlfn
hlfn = vsl * (1# - fe) / vf
If (hlfn <= 0#) Then hlfn = Abs(hlfn)
If (hlfn >= 1#) Then hlfn = 1# - 1# / hlfn
hlf = (hlfn + 4# * hlf) / 5#
'      hlf=hlfn
vc = (vsg + fe * vsl) / (1# - hlf)
af = hlf * axp
ac = (1# - hlf) * axp
hlc = vsl * fe / vc
If (hlc < 0#) Then hlc = 0#
denc = (denl * hlc + deng * (1# - hlf - hlc)) / (1# - hlf)
' wetted angle assuming flat film surface
' calculated using newton"s method
If (af < axp) Then
L10:
    an2 = an1 - 0.5 * (8# * af / d / d + Sin(an1) - an1) / (Cos(an1) - 1#)
    If (an2 > 2# * const_Pi) Then an2 = 1.75 * const_Pi
    If (an2 < 0#) Then an2 = 0.25 * const_Pi
    tha = Abs((an2 - an1) / an1)
    If (tha > e1) Then
        an1 = an2
        GoTo L10
        Else
        an = an2
    End If
    Else
    an = 2# * const_Pi
    af = axp
End If
' wetted wall fraction according to grolman et al., aiche (1996)
If (Abs(ang) < 85#) Then
    th0 = an / (2# * const_Pi)
    th = th0 * (surw / surl) ^ 0.15 + deng * (denl * vsl * vsl * d / surl) ^ 0.25 _
         * (vsg * vsg / ((1# - hlf) ^ 2 * G * d)) ^ 0.8 _
         / ((denl - deng) * cosd(ang))
    If (th > 1#) Then th = 1#
    Else
    th = 1#
End If
If (th > 0.9) Then
    fpt = "ann"
    Else
    fpt = "str"
End If
' wetted perimeters
SF = const_Pi * d * th
sc = const_Pi * d * (1# - th)
ab = d * d * (const_Pi * th - Sin(2# * th * const_Pi) / 2#) / 4#
si = (SF * (ab - af) + d * Sin(const_Pi * th) * af) / ab
' the hydraulic diameters
df = 4# * af / SF
thf = 2# * af / (SF + si)
dc = 4# * ac / (sc + si)
' reynolds numbers
ref = Abs(denl * vf * df / visl)
rec = Abs(deng * vc * dc / visg)
' friction factors
fr2 = 16# / 2000#
fr3 = 1# / (3.6 * log10(6.9 / 3000# + (ed / 3.7) ^ 1.11)) ^ 2
'      fr3=0.046/(3000.0)^0.2
If (ref < 2000#) Then Ff = 16# / ref
If (ref > 3000#) Then Ff = 1# / (3.6 * log10(6.9 / ref + (ed / 3.7) ^ 1.11)) ^ 2
'      if(ref > 3000.0) ff=0.046/(ref)^0.2
If (ref >= 2000# And ref <= 3000#) Then Ff = fr2 + (fr3 - fr2) * (ref - 2000#) / 1000#
If (rec < 2000#) Then fc = 16# / rec
If (rec > 3000#) Then fc = 1# / (3.6 * log10(6.9 / rec + (ed / 3.7) ^ 1.11)) ^ 2
'      if(rec > 3000.0) fc=0.046/(rec)^0.2
If (rec >= 2000# And rec <= 3000#) Then fc = fr2 + (fr3 - fr2) * (rec - 2000#) / 1000#
' interfacial friction factor (stratified) according to andritsos et al. (1987)
' modified by zhang (2001)
vsgt = 5# * Sqr(dengo / deng)
Dim frs
frs = fc * (1# + 15# * (2# * thf / d) ^ 0.5 * (vsg / vsgt - 1#))
'      frs=fc*(1.0+14.3*abs(hlf)^0.5*(vsg/vsgt-1.0))
'      if(frs < fc) frs=fc
' interfacial friction factor (annular) according to ambrosini et al. (1991)
Dim reg, wed, shi, thfo, fra, fs, vfn, vfm, vfo
reg = Abs(vc * deng * d / visg)
wed = deng * vc * vc * d / surl
fs = 0.046 / reg ^ 0.2
shi = Abs(fi * deng * (vc - vf) ^ 2 / 2#)
thfo = thf * Sqr(shi * deng) / visg
fra = fs * (1# + 13.8 * (thfo - 200# * Sqr(deng / denl)) * wed ^ 0.2 / reg ^ 0.6)
If (rec > 10000#) Then
    fi = (10000# * frs / rec + fra) / (1# + 10000# / rec)
    Else
    fi = (fra + frs) / 2#
End If
If (fpt = "ann") Then fi = fra
If (fi < fc) Then fi = fc
If (fi > 1#) Then fi = 1#
' iterations
abcd = (sc * fc * deng * vc * Abs(vc) / (2# * ac) + si * fi * deng * (vc - vf) * Abs(vc - vf) * (1# / af + 1# / ac) / 2# _
     - (denl - denc) * G * sind(ang)) * af * 2# / (SF * Ff * denl)
If (abcd > 0#) Then
    vfn = Sqr(abcd)
    Else
    vfn = -Sqr(-abcd)
End If
vfm = (sc * fc * deng * vc * Abs(vc) / (2# * ac) _
     + si * fi * deng * (vc - vf) * Abs(vc - vf) * (1# / af + 1# / ac) / 2# _
      - (denl - denc) * G * sind(ang) _
     + SF * fi * deng * (vc - vf) * Abs(vc - vf) / (4# * af)) * af * thf / (3# * SF * visl)
icon = icon + 1
If (ref > 3000#) Then vfo = vfn
If (ref < 2000#) Then vfo = vfm
If (ref <= 3000# And ref >= 2000#) Then vfo = (vfn * (ref - 2000#) + vfm * (3000# - ref)) / 1000#
L20:
abu = Abs((vfo - vf) / vf)
If (abu < e1 Or icon > 10000) Then GoTo L100
vf = (vfo + 9# * vf) / 10#
GoTo L5
L100:
vf = vfo
hlfn = vsl * (1# - fe) / vf
If (hlfn <= 0#) Then hlfn = Abs(hlfn)
If (hlfn >= 1#) Then hlfn = 1# - 1# / hlfn
hlf = (hlfn + 4# * hlf) / 5#
vc = (vsg + fe * vsl) / (1# - hlf)
af = hlf * axp
ac = (1# - hlf) * axp
hlc = vsl * fe / vc
If (hlc < 0#) Then hlc = 0#
' frictional factors
denc = (denl * hlc + deng * (1# - hlf - hlc)) / (1# - hlf)
' pressure gradient
Dim dpf
If (fpt = "ann") Then
    dpf = -si * fi * deng * (vc - vf) * Abs(vc - vf) / (2# * ac) - denc * G * sind(ang)
    Else
    dpf = -SF * Ff * denl * vf * Abs(vf) / (2# * axp) _
         - sc * fc * deng * vc * Abs(vc) / (2# * axp) _
         - (denl * hlf + denc * (1# - hlf)) * G * sind(ang)
End If
' total pressure gradient
pgt = dpf / (1# - deng * vc * vsg / (p * (1# - hlf)))
' total pressure gradient due to friction
pgf = dpf + (denl * hlf + denc * (1# - hlf)) * G * sind(ang)
pgg = -(denl * hlf + denc * (1# - hlf)) * G * sind(ang)
pga = pgt - pgf - pgg
' liquid holdup
Hl = hlf + hlc
Exit Sub
End Sub
'Public Sub unf_DataPrepareForGradientCalc(ByVal arr_d_m As Double, ByVal arr_theta_deg As Double, _
'                                      ByVal arr_roughness_m As Double, _
'                                      ByVal P_atma As Double, _
'                                      ByVal Qo_m3day As Double, ByVal Qw_m3day As Double, ByVal Qg_sc_m3day As Double, _
'                                      ByVal Bo_m3m3 As Double, ByVal Bw_m3m3 As Double, ByVal Bg_m3m3 As Double, _
'                                      ByVal Rs_m3m3 As Double, _
'                                      ByVal Muo_cP As Double, ByVal Muw_cP As Double, ByVal Mug_cP As Double, _
'                                      ByVal sigma_o_Nm As Double, ByVal sigma_w_Nm As Double, _
'                                      ByVal rho_osc_kgm3 As Double, ByVal rho_wsc_kgm3 As Double, ByVal rho_gsc_kgm3 As Double, _
'                                Optional ByRef d_out_ft As Double, _
'                                Optional ByRef roughness_out_d As Double, _
'                                Optional ByRef p_out_psi As Double, _
'                                Optional ByRef vsm_out_ftsec As Double, Optional ByRef vsl_out_ftsec As Double, Optional ByRef vsg_out_ftsec As Double, _
'                                Optional ByRef vsm_out_msec As Double, Optional ByRef Vsl_out_msec As Double, Optional ByRef Vsg_out_msec As Double, _
'                                Optional ByRef LiqHoldupNonslip_out_fr As Double, _
'                                Optional ByRef deng_out_lbmft3 As Double, Optional ByRef denl_out_lbmft3 As Double, _
'                                Optional ByRef deng_out_kgm3 As Double, Optional ByRef denl_out_kgm3 As Double, _
'                                Optional ByRef visg_out_cP As Double, _
'                                Optional ByRef visl_out_cP As Double, _
'                                Optional ByRef LiqSurfTension_out_dynescm As Double, _
'                                Optional ByRef LiqSurfTension_out_Nm As Double, _
'                                Optional ByRef Rho_n_out_kgm3 As Double, _
'                                Optional ByRef mu_n_out_cP As Double)
''
''     d_out_ft = arr_d_m / const_convert_ft_m   ' поменять  вызов потом
''     roughness_out_d = arr_roughness_m / arr_d_m
''
''     p_out_psi = P_atma * const_convert_atma_psi    ' похоже давление нигде не используется в расчете
''
''     'Pipe cross-sectional area
''     Dim Ap_m2 As Double
''     Ap_m2 = const_Pi * arr_d_m ^ 2 / 4
''
''     'Calculate flow rates at reference pressure
''     Dim Qo_rp_m3day, Qw_rp_m3day, Ql_rp_m3day, Qg_rp_m3day As Double
''
''     Qo_rp_m3day = Qo_m3day * Bo_m3m3 '*c_q(Units)
''     Qw_rp_m3day = Qw_m3day * Bw_m3m3 ' *c_q(Units)
''     If Qo_rp_m3day + Qw_rp_m3day < const_ZNLF_rate Then
''        ' предохранитель от нулевого дебита при котором все глючит
''        Qo_rp_m3day = const_ZNLF_rate
''        Qw_rp_m3day = 0
''     End If
''     Ql_rp_m3day = Qo_rp_m3day + Qw_rp_m3day
''     Qg_rp_m3day = Bg_m3m3 * (Qg_sc_m3day - Rs_m3m3 * Qo_m3day)
''
''     'if gas rate is negative - assign gas rate to zero
''     If Qg_rp_m3day < 0 Then
''           Qg_rp_m3day = 0
''     End If
''
''     'calculate volume fraction of water in liquid at no-slip conditions
''     Dim f_w, lambda_l  As Double
''     f_w = Qw_rp_m3day / Ql_rp_m3day
''     'volume fraction of liquid at no-slip conditions
''     lambda_l = Ql_rp_m3day / (Ql_rp_m3day + Qg_rp_m3day)
''
''     'densities
''     Dim rho_o_kgm3, rho_w_kgm3, rho_l_kgm3, rho_g_kgm3, rho_n As Double
''     rho_o_kgm3 = (rho_osc_kgm3 + Rs_m3m3 * rho_gsc_kgm3) / Bo_m3m3 ' при расчете плотности нефти учитываем как увеличение массы нефти за счет растворенного газа, так и увеличение объема за счет растворенного газа
''     rho_w_kgm3 = rho_wsc_kgm3 / Bw_m3m3
''     rho_l_kgm3 = rho_o_kgm3 * (1 - f_w) + rho_w_kgm3 * f_w
''     rho_g_kgm3 = rho_gsc_kgm3 / Bg_m3m3
''
''    'no-slip mixture density
''    Rho_n_out_kgm3 = rho_l_kgm3 * lambda_l + rho_g_kgm3 * (1 - lambda_l)
''
''    'Liquid surface tension
''    Dim sigma_l_Nm As Double
''
''    sigma_l_Nm = sigma_o_Nm * (1 - f_w) + sigma_w_Nm * f_w
''
''    'Liquid viscosity
''    Dim Mu_l_cP As Double
''
''    Mu_l_cP = Muo_cP * (1 - f_w) + Muw_cP * f_w
''
''    'No slip mixture viscosity
''    Dim mu_n As Double
''
''    mu_n_out_cP = Mu_l_cP * lambda_l + Mug_cP * (1 - lambda_l)
''
''    'Sureficial velocities
''    Dim Vsl_msec, Vsg_msec, Vsm_msec As Double
''
''    Vsl_msec = const_conver_sec_day * Ql_rp_m3day / Ap_m2
''
''    Vsg_msec = const_conver_sec_day * Qg_rp_m3day / Ap_m2
''
''    Vsm_msec = Vsl_msec + Vsg_msec
''
''    vsm_out_ftsec = Vsm_msec * const_convert_m_ft
''    vsl_out_ftsec = Vsl_msec * const_convert_m_ft
''    vsg_out_ftsec = Vsg_msec * const_convert_m_ft
''
''    vsm_out_msec = Vsm_msec
''    Vsl_out_msec = Vsl_msec
''    Vsg_out_msec = Vsg_msec
''
''
''    LiqHoldupNonslip_out_fr = lambda_l
''
''    deng_out_lbmft3 = rho_g_kgm3 * const_convert_kgm3_lbmft3
''    denl_out_lbmft3 = rho_l_kgm3 * const_convert_kgm3_lbmft3
''    deng_out_kgm3 = rho_g_kgm3
''    denl_out_kgm3 = rho_l_kgm3
''    visg_out_cP = Mug_cP
''    visl_out_cP = Mu_l_cP
''    LiqSurfTension_out_dynescm = sigma_l_Nm * const_convert_Nm_dynescm   ' conversion from N/m to mN/m or dyn/cm
''    LiqSurfTension_out_Nm = sigma_l_Nm
''
''End Sub
''
''
'Sub DataPrepareForGradientCalc_simple(ByVal arr_d_m As Double, ByVal arr_theta_deg As Double, _
'                                      ByVal arr_roughness_m As Double, _
'                                      ByVal Qo_rc_m3day As Double, ByVal Qw_rc_m3day As Double, ByVal Qg_rc_m3day As Double, _
'                                      ByVal rho_o_rc_kgm3 As Double, ByVal rho_w_rc_kgm3 As Double, ByVal rho_g_rc_kgm3 As Double, _
'                                Optional ByRef d_out_ft As Double, _
'                                Optional ByRef roughness_out_d As Double, _
'                                Optional ByRef vsm_out_ftsec As Double, Optional ByRef vsl_out_ftsec As Double, Optional ByRef vsg_out_ftsec As Double, _
'                                Optional ByRef vsm_out_msec As Double, Optional ByRef Vsl_out_msec As Double, Optional ByRef Vsg_out_msec As Double, _
'                                Optional ByRef LiqHoldupNonslip_out_fr As Double)
'
'     d_out_ft = arr_d_m / const_convert_ft_m   ' поменять  вызов потом
'     roughness_out_d = arr_roughness_m / arr_d_m
'
'     'Pipe cross-sectional area
'     Dim Ap_m2 As Double
'     Ap_m2 = const_Pi * arr_d_m ^ 2 / 4
'
'     'Calculate flow rates at reference pressure
''     Dim Qo_rp_m3day, Qw_rp_m3day, Qg_rp_m3day As Double
'     Dim Ql_rc_m3day As Double
'
''     Qo_rp_m3day = Qo_m3day * Bo_m3m3 '*c_q(Units)
''     Qw_rp_m3day = Qw_m3day * Bw_m3m3 ' *c_q(Units)
''     If Qo_rp_m3day + Qw_rp_m3day < const_ZNLF_rate Then
'        ' предохранитель от нулевого дебита при котором все глючит
''        Qo_rp_m3day = const_ZNLF_rate
''        Qw_rp_m3day = 0
''     End If
'     Ql_rc_m3day = Qo_rc_m3day + Qw_rc_m3day
''     Qg_rp_m3day = Bg_m3m3 * (Qg_sc_m3day - Rs_m3m3 * Qo_m3day)
'
'     'if gas rate is negative - assign gas rate to zero
''     If Qg_rp_m3day < 0 Then
''           Qg_rp_m3day = 0
''     End If
'
'     'calculate volume fraction of water in liquid at no-slip conditions
'     Dim f_w, lambda_l  As Double
'     f_w = Qw_rc_m3day / Ql_rc_m3day
'     'volume fraction of liquid at no-slip conditions
'     lambda_l = Ql_rc_m3day / (Ql_rc_m3day + Qg_rc_m3day)
'
'     'densities
''     Dim rho_o_kgm3, rho_w_kgm3, rho_l_kgm3, rho_g_kgm3, rho_n As Double
''     rho_o_kgm3 = (rho_osc_kgm3 + Rs_m3m3 * rho_gsc_kgm3) / Bo_m3m3 ' при расчете плотности нефти учитываем как увеличение массы нефти за счет растворенного газа, так и увеличение объема за счет растворенного газа
''     rho_w_kgm3 = rho_wsc_kgm3 / Bw_m3m3
''     rho_l_kgm3 = rho_o_kgm3 * (1 - f_w) + rho_w_kgm3 * f_w
''     rho_g_kgm3 = rho_gsc_kgm3 / Bg_m3m3
'
'    'no-slip mixture density
''    Rho_n_out_kgm3 = rho_l_kgm3 * lambda_l + rho_g_kgm3 * (1 - lambda_l)
'
'    'Liquid surface tension
'    Dim sigma_l_Nm As Double
'
' '   sigma_l_Nm = sigma_o_Nm * (1 - f_w) + sigma_w_Nm * f_w
'
'    'Liquid viscosity
' '   Dim Mu_l_cP As Double
'
''    Mu_l_cP = Muo_cP * (1 - f_w) + Muw_cP * f_w
'
'    'No slip mixture viscosity
''    Dim mu_n As Double
'
' '   mu_n_out_cP = Mu_l_cP * lambda_l + Mug_cP * (1 - lambda_l)
'
'    'Sureficial velocities
'    Dim Vsl_msec, Vsg_msec, Vsm_msec As Double
'
'    Vsl_msec = const_conver_sec_day * Ql_rc_m3day / Ap_m2
'
'    Vsg_msec = const_conver_sec_day * Qg_rc_m3day / Ap_m2
'
'    Vsm_msec = Vsl_msec + Vsg_msec
'
'    vsm_out_ftsec = Vsm_msec * const_convert_m_ft
'    vsl_out_ftsec = Vsl_msec * const_convert_m_ft
'    vsg_out_ftsec = Vsg_msec * const_convert_m_ft
'
'    vsm_out_msec = Vsm_msec
'    Vsl_out_msec = Vsl_msec
'    Vsg_out_msec = Vsg_msec
'
'
'    LiqHoldupNonslip_out_fr = lambda_l
'
''    deng_out_lbmft3 = rho_g_kgm3 * const_convert_kgm3_lbmft3
''    denl_out_lbmft3 = rho_l_kgm3 * const_convert_kgm3_lbmft3
''    deng_out_kgm3 = rho_g_kgm3
''    denl_out_kgm3 = rho_l_kgm3
''    visg_out_cP = Mug_cP
''   visl_out_cP = Mu_l_cP
' '   LiqSurfTension_out_dynescm = sigma_l_Nm * const_convert_Nm_dynescm   ' conversion from N/m to mN/m or dyn/cm
''   LiqSurfTension_out_Nm = sigma_l_Nm
'
'End Sub
Function unf_calc_friction_factor(ByVal n_re As Double, ByVal E As Double, ByVal Rough_pipe As Integer)
'Calculates friction factor given pipe relative roughness and Reinolds number
'Parameters
'n_re - Reinolds number
'e - pipe relative roughness
'Rough_pipe - flag indicating weather to calculate friction factor for rough pipe using Moody correlation (Rough_pipe > 0), or
'using Drew correlation for smooth pipes
'friction factor and iterated friction factor
Dim f_n, f_n_new, f_int As Double
If n_re > 2000 Then 'turbulent flow
  
  If Rough_pipe > 0 Then 'calculate friction factor for rough pipes according to Moody method - Payne et all modification for Beggs&Brill correlation
  
    f_n = (2 * log10(2 / 3.7 * E - 5.02 / n_re * log10(2 / 3.7 * E + 13 / n_re))) ^ -2
    Dim i As Integer
    i = 0
    'iterate until error in friction factor is sufficiently small
    Do
      f_n_new = (1.74 - 2 * log10(2 * E + 18.7 / (n_re * f_n ^ 0.5))) ^ -2
      i = i + 1
      f_int = f_n
      f_n = f_n_new
    'stop when error is sufficiently small or max number of iterations exceedied
    Loop Until (Abs(f_n_new - f_int) <= 0.001 Or i > 19)
  Else 'Calculate friction factor for smooth pipes using Drew correlation - original Begs&Brill with no modification
    
    f_n = 0.0056 + 0.5 * n_re ^ -0.32
    
  End If
Else 'laminar flow
  
  f_n = 64 / n_re
End If
unf_calc_friction_factor = f_n
End Function
'=======================================================================================
'Unifloc7.3  Testudines                                           khabibullinra@gmail.com
'Библиотека расчетных модулей по нефтяному инжинирингу
'2000 - 2018 г
'
'=======================================================================================
' Расчет естественной сепарации по Маркезу
Public Function unf_calc_natural_separation(ByVal dtub_m_ As Double, ByVal dcas_m_ As Double, _
                                  ByVal Qliq_scm3day As Double, ByVal Qg_sc_m3day As Double, _
                                  ByVal Bo_m3m3 As Double, ByVal Bg_m3m3 As Double, ByVal sigma_o As Double, _
                                  ByVal rho_osc As Double, ByVal rho_gsc As Double, ByVal WCT As Double, Optional Units As Integer = 1) As Double
'function calculates pressure gradient for Zero Net Liquid flow in annulus
'Return (psi/ft (atma/m))
'Arguments
'dtub_m_ -  internal diameter arr_theta_deg( (m))
'dcas_m_ -  internal diameter arr_theta_deg( (m))
'arr_theta_deg - pipe inclination angel (degrees)
'p - reference pressure ( (atma))
'Qo_m3day - liquid rate at standard conditions ( (m3/day))
'Qg_sc_m3day - gas rate at standard conditions ((m3/day))
'Bo_m3m3 - oil formation volume factor at reference pressure ( (m3/sm3))
'Bg_m3m3 - gas formation volume factor at reference pressure ( (m3/sm3))
'Rs_m3m3 - gas-oil solution ratio at reference pressure ( (sm3/sm3))
'sigma_o - oil-gAs surface tension coefficient ((Newton/m))
'rho_osc - oil density at standard conditions ( (kg/m3))
'rho_gsc - gas density at standard conditions((kg/m3))
If (Qliq_scm3day = 0) Or (dtub_m_ = dcas_m_) Then
 unf_calc_natural_separation = 1
 Exit Function
End If
'water-gas surface tension coefficient (Newton/m)
Dim sigma_w As Double
sigma_w = 0.01
'g = 9.81
'Calculate pressure gradient
'Annulus cross-sectional area
Dim a_p As Double
a_p = const_Pi * (dcas_m_ ^ 2 - dtub_m_ ^ 2) / 4
Dim q_g As Double
q_g = Bg_m3m3 * Qg_sc_m3day
Dim q_l As Double
q_l = Bo_m3m3 * Qliq_scm3day * (1 - WCT / 100) + Qliq_scm3day * WCT / 100
'calculate oil density
Dim lambda_l  As Double
'volume fraction of liquid at no-slip conditions
lambda_l = q_l / (q_l + q_g)
'densities
Dim rho_o, rho_w, rho_l, rho_g, rho_n As Double
rho_o = (rho_osc) / Bo_m3m3
rho_w = 1000
'TODO - replace water density
rho_l = rho_o * (1 - WCT / 100) + rho_w * WCT / 100
rho_g = rho_gsc / Bg_m3m3
'no-slip mixture density
rho_n = rho_l * lambda_l + rho_g * (1 - lambda_l)
Dim V_sg As Double
Dim V_sl As Double
'Gas sureficial velocity
V_sg = 0.000011574 * q_g / a_p
'Liquid sureficial velocity
V_sl = 0.000011574 * q_l / a_p
'----------------------
'Liquid surface tension
Dim sigma_l As Double
sigma_l = sigma_o * (1 - WCT / 100) + sigma_w * WCT / 100
'Sureficial velocities
Dim v_m As Double
v_m = V_sl + V_sg
'Froude number
Dim n_fr As Double
n_fr = v_m ^ 2 / (const_g * (dcas_m_ - dtub_m_))
'-----------------------------------------------------------------------
'determine flow pattern
Dim flow_pattern As Integer
If (n_fr >= 316 * lambda_l ^ 0.302 Or n_fr >= 0.5 * lambda_l ^ -6.738) Then
  flow_pattern = 2
Else
  If (n_fr <= 0.000925 * lambda_l ^ -2.468) Then
    flow_pattern = 0
  Else
    If (n_fr <= 0.1 * lambda_l ^ -1.452) Then
      flow_pattern = 3
    Else
      flow_pattern = 1
    End If
  End If
End If
'-----------------------
'Calculate terminal gas rise velosity
Dim v_inf As Double
If (flow_pattern = 0 Or flow_pattern = 1) Then
v_inf = 1.53 * (const_g * sigma_l * (rho_l - rho_g) / rho_l ^ 2) ^ 0.25
Else
v_inf = 1.41 * (const_g * sigma_l * (rho_l - rho_g) / rho_l ^ 2) ^ 0.25
End If
' calculate separation efficienty
Dim a As Double, B As Double, c As Double, d As Double, ST As Double, backst As Double, M As Double
a = -0.0093
B = 57.758
c = 34.4
d = 1.308
ST = 272
backst = 1 / 272
M = V_sl / v_inf
If M > 13 Then
 unf_calc_natural_separation = 0
 Exit Function
End If
unf_calc_natural_separation = ((1 + (a * B + c * M ^ d) / (B + M ^ d)) ^ ST + M ^ ST) ^ backst - M
End Function
'
'Public Function Calc_PinOpt_atma(FreeGas_d, Es_d, WC_proc, Ro_o_d, Ro_g_d, Rs_m3m3, t_C, Optional Pvt_cor As Integer = 0) As Double
'    'P_init     - давление инициализации, атм
'    'FreeGas    - доля газ на приеме
'    'Ql         - дебит жидкости, м3/сут
'    'Wc         - обводненость, %
'    'Ro_o       - плотность нефти, г/см3
'    'Gf         - газовый фактор, м3/м3
'    'T          - пластовая температура, С
'    'Ro_g       - отностительная плотность газа (по воздуху)
'    'PVT_cor    - корреляция для PVT
'    'Es         - коэффициент сепарации насоса
'    Dim P11 As Double
'    Dim P12 As Double
'    Dim P21 As Double
'    Dim P22 As Double
'    Dim max_iter As Integer, i As Integer
'
'    Dim e As Double
'    Dim P1, P2, p
'    Dim GF_1
'    Dim Q_g, Q_l
'    Dim p_gas
'
'    Dim Ql As Double
'    Ql = 1   ' задаем произвольный дебит, так как от него расчет не зависит
'    Dim P_init As Double
'    P_init = 600  ' задаем максимальное давление целевое для которого будет вестись поиск
'
'    max_iter = 100
'    e = 0.001
'    P1 = P_init
'    P2 = 0
'    GF_1 = Rs_m3m3
'    For i = 1 To max_iter
'        p = (P1 + P2) / 2
'        P11 = p
'        P12 = p
'        P21 = p
'        P22 = p
'        Q_g = Ql * (1 - WC_proc / 100) * (GF_1 - Calc_Rs_m3m3(P11, t_C, Ro_o_d, Ro_g_d, Pvt_cor, GF_1, , 1)) * Calc_Bg_m3m3(t_C, P12, Ro_g_d, 1) * (1 - Es_d)
'        Q_l = Ql * ((1 - WC_proc / 100) * Calc_Bo_m3m3(P21, t_C, Ro_o_d, Ro_g_d, Pvt_cor, GF_1) + WC_proc / 100 * Calc_Bw_m3m3(P22, t_C + 273))
'        p_gas = Q_g / (Q_g + Q_l)
'        If Abs(p_gas - FreeGas_d) <= e Then Exit For
'        If p_gas > FreeGas_d Then
'           P2 = p
'        Else
'           P1 = p
'        End If
'    Next
'Calc_PinOpt_atma = p
'' считает не очень правильно для низких долей газа, при которые должно выдавать по идее значение близкое к давлению насыщения
'End Function
'Public Function Calc_RsOpt_Pin_m3m3(Pin, FreeGas, Es, wc, Ro_o, Ro_g, t_С, Optional Gf_init = 5000, Optional Pvt_cor As Integer = 0) As Double
'    'Pin        - давление на приеме насоса, атм
'    'FreeGas    - доля газ на приеме насоса
'    'Ql         - дебит жидкости, м3/сут
'    'Wc         - обводненость, %
'    'Ro_o       - плотность нефти, г/см3
'    'Gf_init    - газовый фактор инициализации, м3/м3
'    'T          - пластовая температура, С
'    'Ro_g       - отностительная плотность газа (по воздуху)
'    'PVT_cor    - корреляция для PVT
'    'Es         - коэффициент сепарации насоса
'    Dim P11 As Double
'    Dim P12 As Double
'    Dim P21 As Double
'    Dim P22 As Double
'    Dim G11 As Double
'    Dim G12 As Double
'    Dim G21 As Double
'    Dim G22 As Double
'    Dim max_iter As Integer, i As Integer
'
'    Dim e As Double
'    Dim P1, P2, p
'    Dim GF_1
'    Dim Q_g, Q_l
'    Dim p_gas
'    Dim g1, g2, g
'
'    Dim Ql As Double
'    Ql = 1   ' задаем произвольный дебит, так как от него расчет не зависит
'
'    max_iter = 100
'    e = 0.001
'    g1 = Gf_init
'    g2 = 0
'    For i = 1 To max_iter
'        g = (g1 + g2) / 2
'        G11 = g
'        G12 = g
'        G21 = g
'        P11 = Pin
'        P12 = Pin
'        P21 = Pin
'        P22 = Pin
'        Q_g = Ql * (1 - wc / 100) * (G11 - Calc_Rs_m3m3(P11, t_С, Ro_o, Ro_g, Pvt_cor, G12, , 1)) * Calc_Bg_m3m3(t_С, P12, Ro_g, 1) * (1 - Es)
'        Q_l = Ql * ((1 - wc / 100) * Calc_Bo_m3m3(P21, t_С, Ro_o, Ro_g, Pvt_cor, G21) + wc / 100 * Calc_Bw_m3m3(P22, t_С + 273))
'        p_gas = Q_g / (Q_g + Q_l)
'        If Abs(p_gas - FreeGas) <= e Then Exit For
'        If p_gas > FreeGas Then
'           g1 = g
'        Else
'           g2 = g
'        End If
'    Next
'Calc_RsOpt_Pin_m3m3 = g
'End Function
'' расчет доли свободного газа поступающего на прием насоса
'Public Function Calc_GasFrac_Pin_d(P_init, wc, Ro_o, Ro_g, Rp, t_C, Es, Optional Pvt_cor As Integer = 0) As Double
'    'P_init     - давление инициализации, атм
'    'FreeGas    - доля газ на приеме
'    'Ql         - дебит жидкости, м3/сут
'    'Wc         - обводненость, %
'    'Ro_o       - плотность нефти, г/см3
'    'Rp         - газовый фактор, м3/м3
'    'T          - пластовая температура, С
'    'Ro_g       - отностительная плотность газа (по воздуху)
'    'PVT_cor    - корреляция для PVT
'    'Es         - коэффициент сепарации насоса
'Dim temp1, temp2, temp3 As Double
'    Dim Ql As Double
'    Ql = 1   ' задаем произвольный дебит, так как от него расчет не зависит
'    Calc_GasFrac_Pin_d = Calc_Rs_m3m3(P_init, t_C, Ro_o, Ro_g, Pvt_cor, Rp)
'    Dim Q_g As Double, Q_l As Double
'    If Rp >= Calc_GasFrac_Pin_d Then
'     Q_g = Ql * (1 - wc / 100) * (Rp - Calc_GasFrac_Pin_d) * Calc_Bg_m3m3(t_C, P_init, Ro_g, Pvt_cor) * (1 - Es)
'    Else
'     MsgBox "Rp < Rs_Pin_calc "
'
'    End If
'
'    Q_l = Ql * ((1 - wc / 100) * Calc_Bo_m3m3(P_init, t_C, Ro_o, Ro_g, Pvt_cor, Rp) + wc / 100 * Calc_Bw_m3m3(P_init, t_C + 273))
'
'    Calc_GasFrac_Pin_d = Q_g / (Q_g + Q_l)
'
'
'End Function
'' расчет расхода газожидкостной смеси при заданных термобарических условиях
'Public Function Calc_QTotal_Pin_m3day(ByVal Ppump As Double, ByVal Tpump As Double, ByVal Rp As Double, ByVal Ql As Double, ByVal wc As Double, _
'                                           ByVal Ro_o As Double, Optional Ro_g As Double = 0.8, Optional Pvt_cor As Integer = 0, Optional Es As Double = 0)
'    'Ppump      - давление на приеме для которого вычисляется расход, атм
'    'Tpump      - температура на приеме для которого вычисляется расход, С
'    'Ql         - дебит жидкости в стандартных условиях, м3/сут
'    'Wc         - обводненость, %
'    'Ro_o       - плотность нефти, г/см3
'    'Rp         - газовый фактор, м3/м3
'    'Ro_g       - отностительная плотность газа (по воздуху)
'    'PVT_cor    - корреляция для PVT
'    Dim Rs_Pin_calc As Double
'    Dim Q_g As Double
'    Dim Q_l As Double
'    Dim b_o1 As Double
'    Dim b_w1 As Double
'
'    'Tpump = Tpump + 273
'    Rs_Pin_calc = Calc_Rs_m3m3(Ppump, Tpump, Ro_o, Ro_g, Pvt_cor, Rp)
'    If Rp >= Rs_Pin_calc Then
'      Q_g = Ql * (1 - wc / 100) * (Rp - Rs_Pin_calc) * Calc_Bg_m3m3(Tpump, Ppump, Ro_g, Pvt_cor) * (1 - Es)
'      b_o1 = Calc_Bo_m3m3(Ppump, Tpump, Ro_o, Ro_g, Pvt_cor, Rp)
'      b_w1 = Calc_Bw_m3m3(Ppump, Tpump + 273)
'      Q_l = Ql * ((1 - wc / 100) * b_o1 + wc / 100 * b_w1)
'      Calc_QTotal_Pin_m3day = Q_g + Q_l
'    Else
'     'MsgBox "Rp < Rs_Pin_calc "
'     'надо тут вставить вызов записи в лог
'     Debug.Assert True
'    End If
'End Function
'
'
' Данный модуль содержит функцию расчета градиента давления по методике Грея
'
' Федоров, Халиков (2016)
'
'
'
        
Public Function unf_GrayModifiedGradient(p_atma As Double, T_C As Double, ByVal d_m As Double, _
                                  ByVal theta_deg As Double, ByVal eps_m As Double, _
                                  ByVal Ql_rc_m3day As Double, ByVal Qg_rc_m3day As Double, _
                                  ByVal Mul_rc_cP As Double, ByVal Mug_rc_cP As Double, _
                                  ByVal sigma_l_Nm As Double, _
                                  ByVal rho_lrc_kgm3 As Double, _
                                  ByVal rho_grc_kgm3 As Double, _
                                  Optional Payne_et_all_holdup As Integer = 0, _
                                  Optional Payne_et_all_friction As Integer = 1, _
                                  Optional correl3 As Double = 0, _
                                  Optional betta_grav As Double = 1, _
                                  Optional betta_fric As Double = 1)
                                  
'function for calculation of pressure gradient in pipe according to Begs and Brill method
'Return (psi/ft (atma/m))
'Arguments
'd - pipe internal diameter (ft (m))
'theta - pipe inclination angel (degrees)
'eps - pipe wall roughness (ft (m))
'p - reference pressure (psi (atma))
'q_oSC - oil rate at standard conditions (Stb/day (m3/day))
'q_wSC - water rate at standard conditions (Stb/day (m3/day))
'q_gSC - gas rate at standard conditions (scf/day (m3/day))
'b_o - oil formation volume factor at reference pressure (bbl/stb (m3/sm3))
'b_w - water formation volume factor at reference pressure (bbl/stb (m3/sm3))
'b_g - gas formation volume factorat reference pressure (ft3/scf (m3/sm3))
'rs - gas-oil solution ratio at reference pressure (Scf/stb (sm3/sm3))
'mu_o - oil viscosity at reference pressure (cp)
'mu_w - water viscosity at reference pressure (cp)
'mu_g - gAs viscosity at reference pressure (cp)
'sigma_o - oil-gAs surface tension coefficient (dynes/sm (Newton/m))
'sigma_w - water-gAs surface tension coefficient (dynes/sm (Newton/m))
'rho_oSC - oil density at standard conditions (lbm/ft3 (kg/m3))
'rho_wSC - water density at standard conditions (lbm/ft3 (kg/m3))
'rho_gSC - gas density at standard conditions(lbm/ft3 (kg/m3))
'units - input/output units (0-field, 1 - metric)
'Payne_et_all_holdup - flag indicationg weather to applied Payne et all correction and holdup (0 - not applied, 1 - applied)
'Payne_et_all_friction - flag indicationg weather to apply Payne et all correction for friction (0 - not applied, 1 - applied)
'dpdl_g - used to otput pressure gradient due to gravity (psi/ft (atma/m))
'dpdl_f - used to output pressure gradient due to friction (psi/ft (atma/m))
'v_sl - used to output liquid superficial velocity (ft/sec (m/sec))
'v_sg - used to output gas superficial velocity (ft/sec (m/sec))
'h_l - used to output liquid holdup
Dim roughness_d As Double
 
Dim dPdLg_out_atmm As Double
Dim dPdLf_out_atmm As Double
Dim Hl_out_fr As Double
Dim fpat_out_num
Dim dPdLa_out_atmm As Double
Dim Ap_m2 As Double ' площадь трубы
Dim lambda_l   As Double
Dim Vsl_msec, Vsg_msec, Vsm_msec As Double
Dim Rho_n_kgm3 As Double   ' no slip density
Dim rho_s As Double        ' mix density
Dim Mu_n_cP As Double
Dim n_re As Double 'Reinolds number
Dim n_fr As Double 'Froude number
Dim n_lv As Double 'Liquid velocity number
Dim flow_pattern As Integer
Dim f_n As Double ' normalized friction factor
Dim f As Double ' friction factor
Dim Y, s As Double
Const c_p = 0.000009871668   ' переводной коэффициент
    Dim r As Double 'dimensionless'superficial liquid to gas ratio parameter
    Dim E As Double    'Pipe relative roughness
    Dim e1 As Double
    Dim crit As Double
    Dim Nv As Double ' dimensionless 'velocity number
    Dim Nd As Double 'nominal diameter
    Dim B As Double
    Dim h_l 'liquid holdup by original Gray
    Dim dpdl_g As Double, dpdl_f As Double, dpdl_g1 As Double, dpdl_f1 As Double
    Dim dPdL_out_atmm As Double
    
Ap_m2 = const_Pi * d_m ^ 2 / 4
lambda_l = Ql_rc_m3day / (Ql_rc_m3day + Qg_rc_m3day)
roughness_d = eps_m / d_m
Vsl_msec = const_conver_sec_day * Ql_rc_m3day / Ap_m2
Vsg_msec = const_conver_sec_day * Qg_rc_m3day / Ap_m2
Vsm_msec = Vsl_msec + Vsg_msec
Rho_n_kgm3 = rho_lrc_kgm3 * lambda_l + rho_grc_kgm3 * (1 - lambda_l) ' No-slip mixture density
Mu_n_cP = Mul_rc_cP * lambda_l + Mug_rc_cP * (1 - lambda_l) ' No slip mixture viscosity
n_re = 1000 * Rho_n_kgm3 * Vsm_msec * d_m / Mu_n_cP
n_fr = Vsm_msec ^ 2 / (const_g * d_m)
n_lv = Vsl_msec * (rho_lrc_kgm3 / (const_g * sigma_l_Nm)) ^ 0.25
    'liquid holdup is calculated by Gray Original formula
    
    r = Vsl_msec / Vsg_msec
    E = roughness_d
    e1 = 28.5 * sigma_l_Nm / (Rho_n_kgm3 * Vsm_msec ^ 2)
    If r >= 0.007 Then E = e1
    If r < 0.007 Then E = E + r * (e1 - E) / 0.0007
    crit = 2.8
    Nv = Rho_n_kgm3 ^ 2 * Vsm_msec ^ 4 / (const_g * sigma_l_Nm * (rho_lrc_kgm3 - rho_grc_kgm3))
    Nd = const_g * (rho_lrc_kgm3 - rho_grc_kgm3) * d_m ^ 2 / sigma_l_Nm
    
    B = 0.0814 * (1 - 0.0554 * Log(1 + 730 * r / (r + 1)))
    h_l = 1 - (1 - Exp(-2.314 * (Nv * (1 + 205 / Nd)) ^ B)) / (r + 1)
    'Calculate normalized friction factor
    f_n = unf_calc_friction_factor(n_re, E, Payne_et_all_friction)
    'calculate friction factor correction for multiphase flow
    Y = max(sigma_l_Nm / h_l ^ 2, 0.001)
    If (Y > 1 And Y < 1.2) Then
        s = Log(2.2 * Y - 1.2)
    Else
        s = Log(Y) / (-0.0523 + 3.182 * Log(Y) - 0.8725 * (Log(Y)) ^ 2 + 0.01853 * (Log(Y)) ^ 4)
    End If
    f = f_n
    rho_s = rho_lrc_kgm3 * h_l + rho_grc_kgm3 * (1 - h_l) 'calculate mixture density
    dpdl_g = c_p * rho_s * const_g * sind(theta_deg)  'calculate pressure gradient due to gravity
    dpdl_f = c_p * f * Rho_n_kgm3 * Vsm_msec ^ 2 / (2 * d_m)  'calculate pressure gradient due to friction
    dpdl_g1 = c_p * Rho_n_kgm3 * const_g * sind(theta_deg)
    dpdl_f1 = c_p * f * Rho_n_kgm3 * Vsm_msec ^ 2 / (2 * d_m) 'calculate pressure gradient due to friction
   Select Case correl3
   Case 0
    dPdL_out_atmm = dpdl_g + dpdl_f
    dPdLg_out_atmm = dpdl_g
    dPdLf_out_atmm = dpdl_f
       ' p_atma = p_atma + dPdL_out_atmm
       ' T_C = T_C + 5
    'With Fluid
    'Dim fl1 As New CPVT
    'Call fl1.Copy(Fluid)
    'Dim PVT As New CPVT
    'Call fl1.Calc_PVT(p_atma, T_C)
    dPdLa_out_atmm = 0 'c_p * ((fl1.Qliq_rc_m3day + fl1.Qgas_rc_m3day) / (fl1.rho_liq_kgm3 * fl1.Qliq_rc_m3day + fl1.rho_gas_kgm3 * fl1.Qgas_rc_m3day) - 1 / Rho_n_kgm3) * (Rho_n_kgm3 * Vsm_msec) ^ 2
   ' End With
   Case 1
    dPdL_out_atmm = dpdl_g1 + dpdl_f1
    dPdLg_out_atmm = dpdl_g1
    dPdLf_out_atmm = dpdl_f1
    dPdLa_out_atmm = 0
   End Select
    Hl_out_fr = h_l
    fpat_out_num = 0
    unf_GrayModifiedGradient = Array(dPdLg_out_atmm * betta_grav + dPdLf_out_atmm * betta_fric - dPdLa_out_atmm, _
                            dPdLg_out_atmm * betta_grav, _
                            dPdLf_out_atmm * betta_fric, _
                                dPdLa_out_atmm, _
                                Vsl_msec, _
                                Vsg_msec, _
                                Hl_out_fr, _
                                fpat_out_num)
End Function
'Function z_factor_Hall_Yarborough(ByVal gamma_g As Double, ByVal Temp_K As Double, P_MPa As Double)
'
'Dim Tpc As Double, Ppc As Double
'Tpc = PseudoTemperature(gamma_g) 'MPa
'Ppc = PseudoPressure(gamma_g) ' K
'
'Dim Tpr As Double, Ppr As Double
'Tpr = Temp_K / Tpc
'Ppr = P_MPa / Ppc
'
'Dim T As Double
'T = 1 / Tpr
'
'Dim yk1, yk2
'Dim f, dfdy
'
'yk1 = 0.06125 * Ppr * T * Exp(-1.2 * (1 - T) ^ 2)
'f = f_Hall_Yarborough(Ppr, T, yk1)
'dfdy = dfdy_Hall_Yarborough(T, yk1)
'yk2 = yk1 - f / dfdy
'
'Dim K As Integer
'K = 0
'
'Do While Abs(yk2 - yk1) > (10 ^ (-15)) And K < 200
'    K = K + 1
'    yk1 = yk2
'    f = f_Hall_Yarborough(Ppr, T, yk1)
'    dfdy = dfdy_Hall_Yarborough(T, yk1)
'    yk2 = yk1 - f / dfdy
'Loop
'
'Dim y As Double
'y = yk2
'
'z_factor_Hall_Yarborough = 0.06125 * Ppr * T / y * Exp(-1.2 * (1 - T) ^ 2)
'End Function
'
'Function f_Hall_Yarborough(ByVal Ppr As Double, ByVal T As Double, ByVal y As Double)
'
'Dim x1 As Double, x2 As Double, x3 As Double, x4 As Double
'x1 = -0.06125 * Ppr * T * Exp(-1.2 * (1 - T) ^ 2)
'x2 = -(14.76 * T - 9.76 * T ^ 2 + 4.58 * T ^ 3)
'x3 = -(90.7 * T - 242.2 * T ^ 2 + 42.4 * T ^ 3)
'x4 = (2.18 + 2.82 * T)
'
'f_Hall_Yarborough = x1 + ((y + y ^ 2 + y ^ 3 - y ^ 4) / ((1 - y) ^ 3)) + x2 * y ^ 2 + x3 * y ^ x4
'End Function
'Function dfdy_Hall_Yarborough(ByVal T As Double, ByVal y As Double)
'
'Dim x2 As Double, x3 As Double, x4 As Double
'x2 = (14.76 * T - 9.76 * T ^ 2 + 4.58 * T ^ 3)
'x3 = (90.7 * T - 242.2 * T ^ 2 + 42.4 * T ^ 3)
'x4 = (2.18 + 2.82 * T)
'
'dfdy_Hall_Yarborough = ((1 + 4 * y + 4 * y ^ 2 - 4 * y ^ 3 + y ^ 4) / ((1 - y) ^ 4)) + 2 * x2 * y + x3 * x4 * (y ^ (x4 - 1))
'End Function
'
' Федоров, Халиков (2016)
'
'
'
Public Function unf_Gron_Gradient(ByVal d As Double, ByVal theta As Double, ByVal eps As Double, ByVal p As Double, _
                                  ByVal q_osc As Double, ByVal q_wsc As Double, ByVal q_gsc As Double, _
                                  ByVal b_o As Double, ByVal b_w As Double, ByVal b_g As Double, ByVal r_s As Double, ByVal mu_o As Double, _
                                  ByVal mu_w As Double, ByVal mu_g As Double, ByVal sigma_o As Double, ByVal sigma_w As Double, _
                                  ByVal rho_osc As Double, ByVal rho_wsc As Double, ByVal rho_gsc As Double, _
                                  Optional Units As Integer = 1, _
                                  Optional Payne_et_all_friction As Integer = 1, _
                                  Optional correl3 As Double = 0)
'function for calculation of pressure gradient in pipe according to Begs and Brill method
'Return (psi/ft (atma/m))
'Arguments
'd - pipe internal diameter (ft (m))
'theta - pipe inclination angel (degrees)
'eps - pipe wall roughness (ft (m))
'p - reference pressure (psi (atma))
'q_oSC - oil rate at standard conditions (Stb/day (m3/day))
'q_wSC - water rate at standard conditions (Stb/day (m3/day))
'q_gSC - gas rate at standard conditions (scf/day (m3/day))
'b_o - oil formation volume factor at reference pressure (bbl/stb (m3/sm3))
'b_w - water formation volume factor at reference pressure (bbl/stb (m3/sm3))
'b_g - gas formation volume factorat reference pressure (ft3/scf (m3/sm3))
'rs - gas-oil solution ratio at reference pressure (Scf/stb (sm3/sm3))
'mu_o - oil viscosity at reference pressure (cp)
'mu_w - water viscosity at reference pressure (cp)
'mu_g - gAs viscosity at reference pressure (cp)
'sigma_o - oil-gAs surface tension coefficient (dynes/sm (Newton/m))
'sigma_w - water-gAs surface tension coefficient (dynes/sm (Newton/m))
'rho_oSC - oil density at standard conditions (lbm/ft3 (kg/m3))
'rho_wSC - water density at standard conditions (lbm/ft3 (kg/m3))
'rho_gSC - gas density at standard conditions(lbm/ft3 (kg/m3))
'units - input/output units (0-field, 1 - metric)
'Payne_et_all_holdup - flag indicationg weather to applied Payne et all correction and holdup (0 - not applied, 1 - applied)
'Payne_et_all_friction - flag indicationg weather to apply Payne et all correction for friction (0 - not applied, 1 - applied)
'dpdl_g - used to otput pressure gradient due to gravity (psi/ft (atma/m))
'dpdl_f - used to output pressure gradient due to friction (psi/ft (atma/m))
'v_sl - used to output liquid superficial velocity (ft/sec (m/sec))
'v_sg - used to output gas superficial velocity (ft/sec (m/sec))
'h_l - used to output liquid holdup
Dim dPdLg_out_atmm As Double
Dim dPdLf_out_atmm As Double
Dim Vsl_out_msec As Double
Dim Vsg_out_msec As Double
Dim Hl_out_fr As Double
Dim fpat_out_num
Dim dPdLa_out_atmm As Double
Dim V_sl As Double, V_sg As Double
Dim E As Double
Dim dPdL_out_atmm
Dim dpdl_g As Double, dpdl_f As Double, dpdl_g1 As Double, dpdl_f1 As Double
Dim h_l As Double
'Conversion factors and constants (field / metric)
'acceleration due to gravity
Dim G(2) As Double
G(0) = 32.174: G(1) = 9.8
'Oil, water velocity conversion
Dim c_q(2) As Double
c_q(0) = 5.6146: c_q(1) = 1
'Gas-oil solution ratio conversion factor
Dim c_rs(2) As Double
c_rs(0) = 0.17811: c_rs(1) = 1
'Reinolds number conversion factor
Dim c_re(2) As Double
c_re(0) = 1.488: c_re(1) = 1
'Pressure gradient conversion factor
Dim c_p(2) As Double
c_p(0) = 0.00021583: c_p(1) = 0.000009871668
'liquid velocity number conversion
Dim c_sl(2) As Double
c_sl(0) = 4.61561: c_sl(1) = 1
'Calculate auxilary values
'Pipe cross-sectional area
Dim a_p As Double
a_p = const_Pi * d ^ 2 / 4
'Calculate flow rates at reference pressure
Dim q_o, q_w, q_l, q_g As Double
q_o = c_q(Units) * q_osc * b_o
q_w = c_q(Units) * q_wsc * b_w
q_l = q_o + q_w
q_g = b_g * (q_gsc - r_s * q_osc)
'if gas rate is negative - assign gas rate to zero
If q_g < 0 Then
 
 q_g = 0
End If
'calculate volume fraction of water in liquid at no-slip conditions
Dim f_w, lambda_l  As Double
f_w = q_w / q_l
'volume fraction of liquid at no-slip conditions
lambda_l = q_l / (q_l + q_g)
'Debug, remove
'lambda_l = 0.00001
'densities
Dim rho_o, rho_w, rho_l, rho_g, rho_n As Double
rho_o = (rho_osc + c_rs(Units) * r_s * rho_gsc) / b_o
rho_w = rho_wsc / b_w
rho_l = rho_o * (1 - f_w) + rho_w * f_w
rho_g = rho_gsc / b_g
'no-slip mixture density
rho_n = rho_l * lambda_l + rho_g * (1 - lambda_l)
'Liquid surface tension
Dim sigma_l As Double
sigma_l = sigma_o * (1 - f_w) + sigma_w * f_w
'Liquid viscosity
Dim mu_l As Double
mu_l = mu_o * (1 - f_w) + mu_w * f_w
'No slip mixture viscosity
Dim mu_n As Double
mu_n = mu_l * lambda_l + mu_g * (1 - lambda_l)
'Sureficial velocities
Dim v_m As Double
V_sl = 0.000011574 * q_l / a_p
V_sg = 0.000011574 * q_g / a_p
v_m = V_sl + V_sg
'Reinolds number
Dim n_re As Double
n_re = c_re(Units) * 1000 * rho_n * v_m * d / mu_n
'Froude number
Dim n_fr As Double
n_fr = v_m ^ 2 / (G(Units) * d)
'Liquid velocity number
Dim n_lv As Double
n_lv = c_sl(Units) * V_sl * (rho_l / (G(Units) * sigma_l)) ^ 0.25
'Pipe relative roughness
E = eps / d
Dim W As Double ' критерий, определяющий область течения потока смеси
Dim n_re_g As Double ' критерий Рейнольдса для газа
Dim W_boundary As Double ' граничное значение критерия W
Dim flow_pattern As Double
Dim c1 As Double
Dim c2 As Double
If d >= 0.015 And d <= 0.0762 Then
    If (d > 0.06 And d < 0.067 And mu_l > 0 And mu_l <= 450) Or (d > 0.035 And d < 0.04 And mu_l > 0 And mu_l <= 1500) Or (d > 0.048 And d < 0.053 And mu_l > 0 And mu_l <= 750) Or (d > 0.0732 And d < 0.0792 And mu_l > 0 And mu_l <= 300) Then
        
        n_re_g = c_re(Units) * 1000 * rho_g * v_m * d / mu_g
        W = (n_re_g * n_fr * rho_g / (rho_l - rho_g)) ^ (1 / 3)
        W_boundary = (8.2 - 1.7 * 0.01 * (mu_g / mu_l) ^ (-0.6)) * Exp((8 + 62 * (mu_g / mu_l) * (1 - lambda_l)))
        If W <= W_boundary Then flow_pattern = 1 Else flow_pattern = 2
        
            c1 = (2.24 * Exp(0.05 * mu_l) / (1 + 1.1 * 0.05 * mu_l) - 8 * 0.001 * (mu_l ^ 0.6) * (d / 0.015 - 1))
        
        If mu_l <= 40 Then c2 = (1 + 0.11 * Exp(0.05 * mu_l) / (1 + 1.1 * 0.05 * mu_l) - (0.1 - 2.52 * 0.001 * (mu_l - 1)) * (d / 0.015 - 1))
        If mu_l > 40 Then c2 = (1 + 0.11 * Exp(0.05 * mu_l) / (1 + 1.1 * 0.05 * mu_l))
        Dim f As Double
        
        f = 0.067 * (158 / n_re + 2 * E / d) ^ 0.2
        
        Dim rho_s As Double
        Dim delta_rho As Double
        Dim Hl As Double
        
        Hl = lambda_l / (c1 + c2 * n_fr ^ (-0.5))
        delta_rho = rho_o - rho_g
        
        rho_s = rho_l + delta_rho
    End If
End If
'calculate pressure gradient due to gravity
dpdl_g = c_p(Units) * rho_s * G(Units) * sind(theta)
'calculate pressure gradient due to friction
dpdl_f = c_p(Units) * f * (rho_l * (V_sl ^ 2) / (1 - Hl) + rho_g * (V_sg ^ 2) / Hl) / (2 * d)
'calculate pressure gradient
dPdL_out_atmm = dpdl_g + dpdl_f
    dPdLg_out_atmm = dpdl_g
    dPdLf_out_atmm = dpdl_f
    dPdLa_out_atmm = 0
Vsl_out_msec = V_sl
Vsg_out_msec = V_sg
Hl_out_fr = h_l
fpat_out_num = 0
unf_Gron_Gradient = Array(dPdL_out_atmm, _
                            dPdLg_out_atmm, _
                            dPdLf_out_atmm, _
                            dPdLa_out_atmm, _
                            Vsl_out_msec, _
                            Vsg_out_msec, _
                            Hl_out_fr, _
                            fpat_out_num)
End Function
'
' Федоров, Халиков (2016)
'
'
'
' Public Function HagedornandBrawnmodified(ByVal d As Double, ByVal theta As Double, ByVal eps As Double, ByVal P As Double, _
'                                  ByVal q_osc As Double, ByVal q_wsc As Double, ByVal q_gsc As Double, _
'                                  ByVal b_o As Double, ByVal b_w As Double, ByVal b_g As Double, ByVal r_s As Double, ByVal mu_o As Double, _
'                                  ByVal mu_w As Double, ByVal mu_g As Double, ByVal sigma_o As Double, ByVal sigma_w As Double, _
'                                  ByVal rho_osc As Double, ByVal rho_wsc As Double, ByVal rho_gsc As Double, _
'                                  Optional Units As Integer = 1, _
'                                  Optional Payne_et_all_friction As Integer = 1, _
'                                  Optional correl3 As Double = 0)
Public Function unf_HagedornandBrawnmodified(ByVal d_m As Double, _
                                  ByVal theta_deg As Double, ByVal eps_m As Double, _
                                  ByVal Ql_rc_m3day As Double, ByVal Qg_rc_m3day As Double, _
                                  ByVal Mul_rc_cP As Double, ByVal Mug_rc_cP As Double, _
                                  ByVal sigma_l_Nm As Double, _
                                  ByVal rho_lrc_kgm3 As Double, _
                                  ByVal rho_grc_kgm3 As Double, _
                                  ByVal p_atma As Double, _
                                  Optional Payne_et_all_holdup As Integer = 0, _
                                  Optional Payne_et_all_friction As Integer = 1, _
                                  Optional correl3 As Double = 0, _
                                  Optional betta_grav As Double = 1, _
                                  Optional betta_fric As Double = 1)
'function for calculation of pressure gradient in pipe according to Begs and Brill method
'Return (psi/ft (atma/m))
'Arguments
'd - pipe internal diameter (ft (m))
'theta - pipe inclination angel (degrees)
'eps - pipe wall roughness (ft (m))
'p - reference pressure (psi (atma))
'q_oSC - oil rate at standard conditions (Stb/day (m3/day))
'q_wSC - water rate at standard conditions (Stb/day (m3/day))
'q_gSC - gas rate at standard conditions (scf/day (m3/day))
'b_o - oil formation volume factor at reference pressure (bbl/stb (m3/sm3))
'b_w - water formation volume factor at reference pressure (bbl/stb (m3/sm3))
'b_g - gas formation volume factorat reference pressure (ft3/scf (m3/sm3))
'rs - gas-oil solution ratio at reference pressure (Scf/stb (sm3/sm3))
'mu_o - oil viscosity at reference pressure (cp)
'mu_w - water viscosity at reference pressure (cp)
'mu_g - gAs viscosity at reference pressure (cp)
'sigma_o - oil-gAs surface tension coefficient (dynes/sm (Newton/m))
'sigma_w - water-gAs surface tension coefficient (dynes/sm (Newton/m))
'rho_oSC - oil density at standard conditions (lbm/ft3 (kg/m3))
'rho_wSC - water density at standard conditions (lbm/ft3 (kg/m3))
'rho_gSC - gas density at standard conditions(lbm/ft3 (kg/m3))
'units - input/output units (0-field, 1 - metric)
'Payne_et_all_holdup - flag indicationg weather to applied Payne et all correction and holdup (0 - not applied, 1 - applied)
'Payne_et_all_friction - flag indicationg weather to apply Payne et all correction for friction (0 - not applied, 1 - applied)
'dpdl_g - used to otput pressure gradient due to gravity (psi/ft (atma/m))
'dpdl_f - used to output pressure gradient due to friction (psi/ft (atma/m))
'v_sl - used to output liquid superficial velocity (ft/sec (m/sec))
'v_sg - used to output gas superficial velocity (ft/sec (m/sec))
'h_l - used to output liquid holdup
Dim roughness_d As Double
Dim dPdLg_out_atmm As Double
Dim dPdLf_out_atmm As Double
Dim Hl_out_fr As Double
Dim fpat_out_num
Dim dPdLa_out_atmm As Double
Dim Ap_m2 As Double ' площадь трубы
Dim lambda_l   As Double
Dim Vsl_msec, Vsg_msec, Vsm_msec As Double
Dim Rho_n_kgm3 As Double   ' no slip density
Dim rho_s As Double        ' mix density
Dim Mu_n_cP As Double
Dim n_re As Double 'Reinolds number
'Dim n_fr As Double 'Froude number
'Dim n_lv1 As Double 'Liquid velocity number
Dim flow_pattern As Integer
Dim f_n As Double ' normalized friction factor
Dim f As Double ' friction factor
Dim Y, s As Double
    Dim r As Double 'dimensionless'superficial liquid to gas ratio parameter
    Dim E As Double    'Pipe relative roughness
    Dim e1 As Double
    Dim crit As Double
    Dim Nv As Double ' dimensionless 'velocity number
    Dim Nd As Double 'nominal diameter
 '   Dim b As Double
    Dim h_l 'liquid holdup by original Gray
    Dim dpdl_g As Double, dpdl_f As Double, dpdl_g1 As Double, dpdl_f1 As Double
    Dim dPdL_out_atmm
'Liquid velocity number
Dim n_lv As Double
Dim n_gv As Double
Dim n_d As Double
Dim n_l As Double
Dim a As Double, HB_complex As Double
Dim N_lc As Double
Dim aa As Double, Hl_phi As Double
Dim B As Double
Dim l As Double
Dim b_1 As Double
Dim phi As Double
Dim rho_tp As Double
Dim mu_tp As Double
Dim B0 As Double
Dim b1 As Double
Dim B2 As Double
Dim B3 As Double
Dim B4 As Double
Dim c0 As Double
Dim c1 As Double
Dim c2 As Double
Dim c3 As Double
Dim c4 As Double
    
Ap_m2 = const_Pi * d_m ^ 2 / 4
lambda_l = Ql_rc_m3day / (Ql_rc_m3day + Qg_rc_m3day)
roughness_d = eps_m / d_m
Vsl_msec = const_conver_sec_day * Ql_rc_m3day / Ap_m2
Vsg_msec = const_conver_sec_day * Qg_rc_m3day / Ap_m2
Vsm_msec = Vsl_msec + Vsg_msec
Rho_n_kgm3 = rho_lrc_kgm3 * lambda_l + rho_grc_kgm3 * (1 - lambda_l) ' No-slip mixture density
Mu_n_cP = Mul_rc_cP * lambda_l + Mug_rc_cP * (1 - lambda_l) ' No slip mixture viscosity
n_re = 1000 * Rho_n_kgm3 * Vsm_msec * d_m / Mu_n_cP
'n_fr = Vsm_msec ^ 2 / (const_g * d_m)
'n_lv1 = Vsl_msec * (rho_lrc_kgm3 / (const_g * sigma_l_Nm)) ^ 0.25
B0 = -0.1030658
b1 = 0.617774
B2 = -0.632946
B3 = 0.29598
B4 = -0.0401
c0 = 0.9116257
c1 = -4.821756
c2 = 1232.25
c3 = -22253.58
c4 = 116174.3
'Determine Duns and ROs dimensionless groups
'Determine Liquid velosity number
n_lv = 1.938 * Vsl_msec / 0.3048 * (rho_lrc_kgm3 * 0.06243 / (sigma_l_Nm * 1000)) ^ 0.25
''Determine Gas velosity number
n_gv = 1.938 * Vsg_msec / 0.3048 * (rho_lrc_kgm3 * 0.06243 / (sigma_l_Nm * 1000)) ^ 0.25
''Determine Diametr number
n_d = 120.872 * d_m / 0.3048 * (rho_lrc_kgm3 * 0.06243 / (sigma_l_Nm * 1000)) ^ 0.5
''Determine Liquid viscosity number
n_l = 0.15726 * Mul_rc_cP * (1 / (rho_lrc_kgm3 * 0.06243 * (sigma_l_Nm * 1000) ^ 3)) ^ 0.25
' проверим режим потока, чтобы определить надо использовать поправку Гриффитса для пузырькового режима
a = 1.071 - (0.2218 * (Vsm_msec * const_convert_m_ft) ^ 2) / (d_m * const_convert_m_ft)
If a < 0.13 Then a = 0.13
B = Vsg_msec / Vsm_msec
If (B - a) >= 0 Then  ' считаем по Хайгедорну Брауну
        n_lv = Vsl_msec * (rho_lrc_kgm3 / (const_g * sigma_l_Nm)) ^ 0.25 'Determine Liquid velosity number  dimensionless
        n_gv = Vsg_msec * (rho_lrc_kgm3 / (const_g * sigma_l_Nm)) ^ 0.25 'Determine Gas velosity number
        n_d = d_m * (rho_lrc_kgm3 * const_g / sigma_l_Nm) ^ 0.5 'Determine Diametr number
        n_l = Mul_rc_cP * const_convert_cP_Pasec * (const_g / (rho_lrc_kgm3 * sigma_l_Nm ^ 3)) ^ 0.25 'Determine Liquid viscosity number
        N_lc = -0.0259 * n_l ^ 4 + 0.1011 * n_l ^ 3 - 0.1272 * n_l ^ 2 + 0.0619 * n_l + 0.0018  ' корреляция подобрана по графуку рнт
        HB_complex = (n_lv / n_gv ^ 0.575) * (N_lc / n_d) * (p_atma) ^ 0.1
        Hl_phi = B0 + b1 * (log10(HB_complex) + 6) + B2 * (log10(HB_complex) + 6) ^ 2 + B3 * (log10(HB_complex) + 6) ^ 3 + B4 * (log10(HB_complex) + 6) ^ 4
        B = (n_gv * n_l ^ 0.38) / n_d ^ 2.14
        phi = c0 + c1 * B + c2 * B ^ 2 + c3 * B ^ 3 + c4 * B ^ 4
          
        h_l = Hl_phi * phi 'determine liquid holdup
        If h_l < lambda_l Then h_l = lambda_l
        
Else    ' считаем по гриффитсу
        Dim vs_ftsec As Double, vs_msec As Double   ' bubble rise velocity
        vs_ftsec = 0.8
        vs_msec = vs_ftsec * const_convert_ft_m
      '  Dim Hg As Double
        h_l = 1 - 0.5 * (1 + Vsm_msec / vs_msec - ((1 + Vsm_msec / vs_msec) ^ 2 - 4 * (Vsg_msec / vs_msec)) ^ 0.5)
End If
rho_tp = rho_lrc_kgm3 * h_l + rho_grc_kgm3 * (1 - h_l)
mu_tp = Mul_rc_cP ^ h_l + Mug_rc_cP ^ (1 - h_l)
f_n = unf_calc_friction_factor(n_re, E, Payne_et_all_friction)
f = f_n
rho_s = rho_lrc_kgm3 * h_l + rho_grc_kgm3 * (1 - h_l) 'calculate mixture density
dpdl_g = c_p * rho_tp * const_g * sind(theta_deg) 'calculate pressure gradient due to gravity
dpdl_f = c_p * f * Rho_n_kgm3 ^ 2 * Vsm_msec ^ 2 / (2 * d_m * rho_tp) 'calculate pressure gradient due to friction
dpdl_g1 = c_p * Rho_n_kgm3 * const_g * sind(theta_deg)
dpdl_f1 = c_p * f * Rho_n_kgm3 ^ 2 * Vsm_msec ^ 2 / (2 * d_m * rho_tp) 'calculate pressure gradient due to friction
Select Case correl3
Case 0
'calculate pressure gradient
    dPdL_out_atmm = dpdl_g + dpdl_f
 
    dPdLg_out_atmm = dpdl_g
    dPdLf_out_atmm = dpdl_f
    dPdLa_out_atmm = 0
 Case 1
'calculate pressure gradient
    dPdL_out_atmm = dpdl_g1 + dpdl_f1
 
    dPdLg_out_atmm = dpdl_g1
    dPdLf_out_atmm = dpdl_f1
    dPdLa_out_atmm = 0
End Select
Hl_out_fr = h_l
fpat_out_num = 0
unf_HagedornandBrawnmodified = Array(dPdLg_out_atmm * betta_grav + dPdLf_out_atmm * betta_fric, _
                            dPdLg_out_atmm * betta_grav, _
                            dPdLf_out_atmm * betta_fric, _
                            dPdLa_out_atmm, _
                            Vsl_msec, _
                            Vsg_msec, _
                            Hl_out_fr, _
                            fpat_out_num)
End Function
' Федоров, Халиков (2016)
'
'
'
      
      Public Function unf_Krilov_Lutoshkin(ByVal d As Double, ByVal theta As Double, ByVal eps As Double, ByVal p As Double, _
                                  ByVal q_osc As Double, ByVal q_wsc As Double, ByVal q_gsc As Double, _
                                  ByVal b_o As Double, ByVal b_w As Double, ByVal b_g As Double, ByVal r_s As Double, ByVal mu_o As Double, _
                                  ByVal mu_w As Double, ByVal mu_g As Double, ByVal sigma_o As Double, ByVal sigma_w As Double, _
                                  ByVal rho_osc As Double, ByVal rho_wsc As Double, ByVal rho_gsc As Double, _
                                  Optional Units As Integer = 1, _
                                  Optional Payne_et_all_friction As Integer = 1)
'function for calculation of pressure gradient in pipe according to Begs and Brill method
'Return (psi/ft (atma/m))
'Arguments
'd - pipe internal diameter (ft (m))
'theta - pipe inclination angel (degrees)
'eps - pipe wall roughness (ft (m))
'p - reference pressure (psi (atma))
'q_oSC - oil rate at standard conditions (Stb/day (m3/day))
'q_wSC - water rate at standard conditions (Stb/day (m3/day))
'q_gSC - gas rate at standard conditions (scf/day (m3/day))
'b_o - oil formation volume factor at reference pressure (bbl/stb (m3/sm3))
'b_w - water formation volume factor at reference pressure (bbl/stb (m3/sm3))
'b_g - gas formation volume factorat reference pressure (ft3/scf (m3/sm3))
'rs - gas-oil solution ratio at reference pressure (Scf/stb (sm3/sm3))
'mu_o - oil viscosity at reference pressure (cp)
'mu_w - water viscosity at reference pressure (cp)
'mu_g - gAs viscosity at reference pressure (cp)
'sigma_o - oil-gAs surface tension coefficient (dynes/sm (Newton/m))
'sigma_w - water-gAs surface tension coefficient (dynes/sm (Newton/m))
'rho_oSC - oil density at standard conditions (lbm/ft3 (kg/m3))
'rho_wSC - water density at standard conditions (lbm/ft3 (kg/m3))
'rho_gSC - gas density at standard conditions(lbm/ft3 (kg/m3))
'units - input/output units (0-field, 1 - metric)
'Payne_et_all_holdup - flag indicationg weather to applied Payne et all correction and holdup (0 - not applied, 1 - applied)
'Payne_et_all_friction - flag indicationg weather to apply Payne et all correction for friction (0 - not applied, 1 - applied)
'dpdl_g - used to otput pressure gradient due to gravity (psi/ft (atma/m))
'dpdl_f - used to output pressure gradient due to friction (psi/ft (atma/m))
'v_sl - used to output liquid superficial velocity (ft/sec (m/sec))
'v_sg - used to output gas superficial velocity (ft/sec (m/sec))
'h_l - used to output liquid holdup
Dim dPdLg_out_atmm As Double
Dim dPdLf_out_atmm As Double
Dim Vsl_out_msec As Double
Dim Vsg_out_msec As Double
Dim Hl_out_fr As Double
Dim fpat_out_num
Dim dPdLa_out_atmm As Double
Dim V_sl As Double, V_sg As Double
Dim E As Double
Dim dPdL_out_atmm
Dim dpdl_g As Double, dpdl_f As Double, dpdl_g1 As Double, dpdl_f1 As Double
Dim h_l As Double
'Conversion factors and constants (field / metric)
'acceleration due to gravity
Dim G(2) As Double
G(0) = 32.174: G(1) = 9.8
'Oil, water velocity conversion
Dim c_q(2) As Double
c_q(0) = 5.6146: c_q(1) = 1
'Gas-oil solution ratio conversion factor
Dim c_rs(2) As Double
c_rs(0) = 0.17811: c_rs(1) = 1
'Reinolds number conversion factor
Dim c_re(2) As Double
c_re(0) = 1.488: c_re(1) = 1
'Pressure gradient conversion factor
Dim c_p(2) As Double
c_p(0) = 0.00021583: c_p(1) = 0.000009871668
'liquid velocity number conversion
Dim c_sl(2) As Double
c_sl(0) = 4.61561: c_sl(1) = 1
'Calculate auxilary values
'Pipe cross-sectional area
Dim a_p As Double
a_p = const_Pi * d ^ 2 / 4
'Calculate flow rates at reference pressure
Dim q_o, q_w, q_l, q_g As Double
q_o = c_q(Units) * q_osc * b_o
q_w = c_q(Units) * q_wsc * b_w
q_l = q_o + q_w
q_g = b_g * (q_gsc - r_s * q_osc)
'if gas rate is negative - assign gas rate to zero
If q_g < 0 Then
 
 q_g = 0
End If
'calculate volume fraction of water in liquid at no-slip conditions
Dim f_w, lambda_l  As Double
f_w = q_w / q_l
'volume fraction of liquid at no-slip conditions
lambda_l = q_l / (q_l + q_g)
'Debug, remove
'lambda_l = 0.00001
'densities
Dim rho_o, rho_w, rho_l, rho_g, rho_n As Double
rho_o = (rho_osc + c_rs(Units) * r_s * rho_gsc) / b_o
rho_w = rho_wsc / b_w
rho_l = rho_o * (1 - f_w) + rho_w * f_w
rho_g = rho_gsc / b_g
'no-slip mixture density
rho_n = rho_l * lambda_l + rho_g * (1 - lambda_l)
'Liquid surface tension
Dim sigma_l As Double
sigma_l = sigma_o * (1 - f_w) + sigma_w * f_w
'Liquid viscosity
Dim mu_l As Double
mu_l = mu_o * (1 - f_w) + mu_w * f_w
'No slip mixture viscosity
Dim mu_n As Double
mu_n = mu_l * lambda_l + mu_g * (1 - lambda_l)
'Sureficial velocities
Dim v_m As Double
V_sl = 0.000011574 * q_l / a_p
V_sg = 0.000011574 * q_g / a_p
v_m = V_sl + V_sg
'Reinolds number
Dim n_re As Double
n_re = c_re(Units) * 1000 * rho_n * v_m * d / mu_n
'Froude number
Dim n_fr As Double
n_fr = v_m ^ 2 / (G(Units) * d)
'Liquid velocity number
Dim n_lv As Double
n_lv = c_sl(Units) * V_sl * (rho_l / (G(Units) * sigma_l)) ^ 0.25
'Pipe relative roughness
E = eps / d
Dim V_g_crit As Double
Dim Msm As Double
Dim slow_pattern As Double
Dim H_g As Double
Dim flow_pattern
V_g_crit = 1.75 * d ^ 2.5 + 1.25 * q_l
If q_g < V_g_crit Then
    flow_pattern = 1 ' пузырьковая
    H_g = q_g / (q_g + q_l + 0.233 * (d ^ 2) * (sigma_o / sigma_w) ^ (1 / 3))
If q_g > V_g_crit Then
    flow_pattern = 2 ' пробковая
    H_g = d * (q_g ^ 1 / 2) / (d * (q_g ^ 1 / 2) + 0.6023 * q_l + 0.0942 * (d ^ 1.5) * (sigma_o / sigma_w) ^ (1 / 3))
End If
End If
Dim rho_s As Double
rho_s = rho_g * H_g + rho_l * (1 - H_g)
Dim f_g As Double
Dim f_l As Double
f_g = 0.0094 / (d ^ 1 / 3)
f_l = 0.3164 / (n_re ^ 1 / 4)
'calculate pressure gradient due to friction
Dim K As Double
If d > 0.035 And d < 0.04 Then K = 1.06
If d > 0.048 And d < 0.053 Then K = 0.87
If d > 0.059 And d < 0.068 Then K = 0.73
If d > 0.073 And d < 0.0792 Then K = 0.65
dpdl_f = c_p(Units) * 9.07 * (10 ^ (-9)) * (q_g ^ 2) / (d ^ 5.33) + 7.95 * (10 ^ (-6)) * (q_l ^ 1.75) * (mu_l ^ 1 / 4) / (d ^ 4.75) + 1.08 * (10 ^ (-7)) * (q_l ^ (1 / 3)) * (mu_l ^ 0.025) * ((q_g * q_l * 10 ^ 6) ^ K) / d ^ 3
'calculate pressure gradient due to gravity
dpdl_g = c_p(Units) * rho_s * G(Units) * Sin(const_Pi / 180 * theta)
'calculate pressure gradient
 dPdL_out_atmm = dpdl_g + dpdl_f
    dPdLg_out_atmm = dpdl_g
    dPdLf_out_atmm = dpdl_f
    dPdLa_out_atmm = 0
Vsl_out_msec = V_sl
Vsg_out_msec = V_sg
Hl_out_fr = h_l
fpat_out_num = flow_pattern
unf_Krilov_Lutoshkin = Array(dPdL_out_atmm, _
                            dPdLg_out_atmm, _
                            dPdLf_out_atmm, _
                            dPdLa_out_atmm, _
                            Vsl_out_msec, _
                            Vsg_out_msec, _
                            Hl_out_fr, _
                            fpat_out_num)
End Function
' Федоров, Халиков (2016)
'
'
'
Public Function unf_Saharov_Mokhov_Gradient(ByVal d As Double, ByVal theta As Double, ByVal eps As Double, ByVal p As Double, _
                                  ByVal q_osc As Double, ByVal q_wsc As Double, ByVal q_gsc As Double, _
                                  ByVal b_o As Double, ByVal b_w As Double, ByVal b_g As Double, ByVal r_s As Double, ByVal mu_o As Double, _
                                  ByVal mu_w As Double, ByVal mu_g As Double, ByVal sigma_o As Double, ByVal sigma_w As Double, _
                                  ByVal rho_osc As Double, ByVal rho_wsc As Double, ByVal rho_gsc As Double, _
                                  Optional Units As Integer = 1, _
                                  Optional Payne_et_all_friction As Integer = 1, Optional correl3 As Double = 0, _
                                  Optional betta_grav As Double = 1, _
                                  Optional betta_fric As Double = 1)
'function for calculation of pressure gradient in pipe according to Begs and Brill method
'Return (psi/ft (atma/m))
'Arguments
'd - pipe internal diameter (ft (m))
'theta - pipe inclination angel (degrees)
'eps - pipe wall roughness (ft (m))
'p - reference pressure (psi (atma))
'q_oSC - oil rate at standard conditions (Stb/day (m3/day))
'q_wSC - water rate at standard conditions (Stb/day (m3/day))
'q_gSC - gas rate at standard conditions (scf/day (m3/day))
'b_o - oil formation volume factor at reference pressure (bbl/stb (m3/sm3))
'b_w - water formation volume factor at reference pressure (bbl/stb (m3/sm3))
'b_g - gas formation volume factorat reference pressure (ft3/scf (m3/sm3))
'rs - gas-oil solution ratio at reference pressure (Scf/stb (sm3/sm3))
'mu_o - oil viscosity at reference pressure (cp)
'mu_w - water viscosity at reference pressure (cp)
'mu_g - gAs viscosity at reference pressure (cp)
'sigma_o - oil-gAs surface tension coefficient (dynes/sm (Newton/m))
'sigma_w - water-gAs surface tension coefficient (dynes/sm (Newton/m))
'rho_oSC - oil density at standard conditions (lbm/ft3 (kg/m3))
'rho_wSC - water density at standard conditions (lbm/ft3 (kg/m3))
'rho_gSC - gas density at standard conditions(lbm/ft3 (kg/m3))
'units - input/output units (0-field, 1 - metric)
'Payne_et_all_holdup - flag indicationg weather to applied Payne et all correction and holdup (0 - not applied, 1 - applied)
'Payne_et_all_friction - flag indicationg weather to apply Payne et all correction for friction (0 - not applied, 1 - applied)
'dpdl_g - used to otput pressure gradient due to gravity (psi/ft (atma/m))
'dpdl_f - used to output pressure gradient due to friction (psi/ft (atma/m))
'v_sl - used to output liquid superficial velocity (ft/sec (m/sec))
'v_sg - used to output gas superficial velocity (ft/sec (m/sec))
'h_l - used to output liquid holdup
Dim dPdLg_out_atmm As Double
Dim dPdLf_out_atmm As Double
Dim Vsl_out_msec As Double
Dim Vsg_out_msec As Double
Dim Hl_out_fr As Double
Dim fpat_out_num
Dim dPdLa_out_atmm As Double
Dim V_sl As Double, V_sg As Double
Dim E As Double
Dim dPdL_out_atmm
Dim dpdl_g As Double, dpdl_f As Double, dpdl_g1 As Double, dpdl_f1 As Double
Dim h_l As Double
'Conversion factors and constants (field / metric)
'acceleration due to gravity
Dim G(2) As Double
G(0) = 32.174: G(1) = 9.8
'Oil, water velocity conversion
Dim c_q(2) As Double
c_q(0) = 5.6146: c_q(1) = 1
'Gas-oil solution ratio conversion factor
Dim c_rs(2) As Double
c_rs(0) = 0.17811: c_rs(1) = 1
'Reinolds number conversion factor
Dim c_re(2) As Double
c_re(0) = 1.488: c_re(1) = 1
'Pressure gradient conversion factor
Dim c_p(2) As Double
c_p(0) = 0.00021583: c_p(1) = 0.000009871668
'liquid velocity number conversion
Dim c_sl(2) As Double
c_sl(0) = 4.61561: c_sl(1) = 1
'Calculate auxilary values
'Pipe cross-sectional area
Dim a_p As Double
a_p = const_Pi * d ^ 2 / 4
'Calculate flow rates at reference pressure
Dim q_o, q_w, q_l, q_g As Double
q_o = c_q(Units) * q_osc * b_o
q_w = c_q(Units) * q_wsc * b_w
q_l = q_o + q_w
q_g = b_g * (q_gsc - r_s * q_osc)
'if gas rate is negative - assign gas rate to zero
If q_g < 0 Then
 
 q_g = 0
End If
'calculate volume fraction of water in liquid at no-slip conditions
Dim f_w, lambda_l  As Double
f_w = q_w / q_l
'volume fraction of liquid at no-slip conditions
lambda_l = q_l / (q_l + q_g)
'Debug, remove
'lambda_l = 0.00001
'densities
Dim rho_o, rho_w, rho_l, rho_g, rho_n As Double
rho_o = (rho_osc + c_rs(Units) * r_s * rho_gsc) / b_o
rho_w = rho_wsc / b_w
rho_l = rho_o * (1 - f_w) + rho_w * f_w
rho_g = rho_gsc / b_g
'no-slip mixture density
rho_n = rho_l * lambda_l + rho_g * (1 - lambda_l)
'Liquid surface tension
Dim sigma_l As Double
sigma_l = sigma_o * (1 - f_w) + sigma_w * f_w
'Liquid viscosity
Dim mu_l As Double
mu_l = mu_o * (1 - f_w) + mu_w * f_w
'No slip mixture viscosity
Dim mu_n As Double
mu_n = mu_l * lambda_l + mu_g * (1 - lambda_l)
'Sureficial velocities
Dim v_m As Double
V_sl = 0.000011574 * q_l / a_p
V_sg = 0.000011574 * q_g / a_p
v_m = V_sl + V_sg
'Reinolds number
Dim n_re As Double
n_re = c_re(Units) * 1000 * rho_n * v_m * d / mu_n
'Froude number
Dim n_fr As Double
n_fr = v_m ^ 2 / (G(Units) * d)
'Liquid velocity number
Dim n_lv As Double
n_lv = c_sl(Units) * V_sl * (rho_l / (G(Units) * sigma_l)) ^ 0.25
'Pipe relative roughness
E = eps / d
'-----------------------------------------------------------------------
'determine flow pattern
Dim delta_rho    ' увеличение плотности смеси за счёт относительного движения газа
Dim We ' Число Вебера
Dim Ku 'Безразмерный параметр, покритерию подобный критерию Кутателадзе
Dim f_mohov  'коэффициентобщих потерь
delta_rho = rho_o - rho_g
We = sigma_o / (delta_rho * d ^ 2 * G(Units))
Ku = ((rho_l ^ 2) / (delta_rho ^ 2) * (n_fr ^ 2) / We) ^ (1 / 4)
f_mohov = (0.13 * Ku + 1) / (1.13 * Ku + 1) * delta_rho / rho_l * 2 * (1 - lambda_l) / n_fr * Sin(const_Pi / 180 * theta) + 0.11 * (68 / n_re + E / d) ^ 0.25
'calculate pressure gradient due to gravity
dpdl_g = c_p(Units) * rho_n * G(Units) * Sin(const_Pi / 180 * theta)
'calculate pressure gradient due to friction
dpdl_f = c_p(Units) * f_mohov * rho_n * v_m ^ 2 / (2 * d)
'calculate pressure gradient
dPdL_out_atmm = dpdl_g + dpdl_f
    dPdLg_out_atmm = dpdl_g
    dPdLf_out_atmm = dpdl_f
    dPdLa_out_atmm = 0
Vsl_out_msec = V_sl
Vsg_out_msec = V_sg
Hl_out_fr = lambda_l
fpat_out_num = 0
unf_Saharov_Mokhov_Gradient = Array(dPdLg_out_atmm * betta_grav + dPdLf_out_atmm * betta_fric, _
                            dPdLg_out_atmm * betta_grav, _
                            dPdLf_out_atmm * betta_fric, _
                            dPdLa_out_atmm, _
                            Vsl_out_msec, _
                            Vsg_out_msec, _
                            Hl_out_fr, _
                            fpat_out_num)
End Function
